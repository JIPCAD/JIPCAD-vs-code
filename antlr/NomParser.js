// Generated from Nom.g4 by ANTLR 4.9.3
// jshint ignore: start
import antlr4 from 'antlr4';
import NomListener from './NomListener.js';

const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u0093\u0316\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0003\u0002\u0007\u0002Z\n\u0002\f\u0002\u000e",
    "\u0002]\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005\u0003s\n\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0007\u0003~\n\u0003\f\u0003\u000e",
    "\u0003\u0081\u000b\u0003\u0003\u0004\u0003\u0004\u0005\u0004\u0085\n",
    "\u0004\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0005",
    "\u0006\u008c\n\u0006\u0003\u0007\u0003\u0007\u0007\u0007\u0090\n\u0007",
    "\f\u0007\u000e\u0007\u0093\u000b\u0007\u0003\u0007\u0003\u0007\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\n\u0003",
    "\n\u0003\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003",
    "\f\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003",
    "\u0012\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0007\u001a\u00cf\n\u001a\f\u001a\u000e",
    "\u001a\u00d2\u000b\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u00ee\n",
    "\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003",
    "\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003 \u0003",
    "!\u0003!\u0003!\u0003\"\u0003\"\u0003\"\u0003#\u0003#\u0003#\u0003$",
    "\u0003$\u0003%\u0003%\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003",
    "(\u0003(\u0003(\u0003)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0007*\u0134",
    "\n*\f*\u000e*\u0137\u000b*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0007*\u0142\n*\f*\u000e*\u0145\u000b*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0007*\u014d\n*\f*\u000e*\u0150",
    "\u000b*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0007*\u015c\n*\f*\u000e*\u015f\u000b*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0007*\u0167\n*\f*\u000e*\u016a\u000b*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0007",
    "*\u0176\n*\f*\u000e*\u0179\u000b*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0007*\u0180\n*\f*\u000e*\u0183\u000b*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0007",
    "*\u0246\n*\f*\u000e*\u0249\u000b*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0007*\u0250\n*\f*\u000e*\u0253\u000b*\u0003*\u0003*\u0007*\u0257",
    "\n*\f*\u000e*\u025a\u000b*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0007*\u0264\n*\f*\u000e*\u0267\u000b*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0007*\u0298\n*\f*\u000e*\u029b",
    "\u000b*\u0003*\u0003*\u0003*\u0003*\u0007*\u02a1\n*\f*\u000e*\u02a4",
    "\u000b*\u0003*\u0003*\u0003*\u0003*\u0007*\u02aa\n*\f*\u000e*\u02ad",
    "\u000b*\u0003*\u0007*\u02b0\n*\f*\u000e*\u02b3\u000b*\u0003*\u0007*",
    "\u02b6\n*\f*\u000e*\u02b9\u000b*\u0003*\u0003*\u0003*\u0003*\u0003*",
    "\u0006*\u02c0\n*\r*\u000e*\u02c1\u0003*\u0003*\u0003*\u0003*\u0003*",
    "\u0007*\u02c9\n*\f*\u000e*\u02cc\u000b*\u0003*\u0007*\u02cf\n*\f*\u000e",
    "*\u02d2\u000b*\u0003*\u0007*\u02d5\n*\f*\u000e*\u02d8\u000b*\u0003*",
    "\u0007*\u02db\n*\f*\u000e*\u02de\u000b*\u0003*\u0003*\u0003*\u0003*",
    "\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0007*\u02f1\n*\f*\u000e*\u02f4\u000b*\u0003",
    "*\u0007*\u02f7\n*\f*\u000e*\u02fa\u000b*\u0003*\u0003*\u0003*\u0003",
    "*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005",
    "*\u0309\n*\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003+\u0003,\u0003",
    ",\u0003,\u0003,\u0003,\u0002\u0003\u0004-\u0002\u0004\u0006\b\n\f\u000e",
    "\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@B",
    "DFHJLNPRTV\u0002\u0004\u0003\u0002\u0088\u0089\u0003\u0002\u008a\u008b",
    "\u0002\u0342\u0002[\u0003\u0002\u0002\u0002\u0004r\u0003\u0002\u0002",
    "\u0002\u0006\u0084\u0003\u0002\u0002\u0002\b\u0086\u0003\u0002\u0002",
    "\u0002\n\u008b\u0003\u0002\u0002\u0002\f\u008d\u0003\u0002\u0002\u0002",
    "\u000e\u0096\u0003\u0002\u0002\u0002\u0010\u009c\u0003\u0002\u0002\u0002",
    "\u0012\u009e\u0003\u0002\u0002\u0002\u0014\u00a1\u0003\u0002\u0002\u0002",
    "\u0016\u00a4\u0003\u0002\u0002\u0002\u0018\u00a7\u0003\u0002\u0002\u0002",
    "\u001a\u00aa\u0003\u0002\u0002\u0002\u001c\u00ad\u0003\u0002\u0002\u0002",
    "\u001e\u00af\u0003\u0002\u0002\u0002 \u00b1\u0003\u0002\u0002\u0002",
    "\"\u00b3\u0003\u0002\u0002\u0002$\u00b6\u0003\u0002\u0002\u0002&\u00b9",
    "\u0003\u0002\u0002\u0002(\u00bc\u0003\u0002\u0002\u0002*\u00bf\u0003",
    "\u0002\u0002\u0002,\u00c2\u0003\u0002\u0002\u0002.\u00c5\u0003\u0002",
    "\u0002\u00020\u00c8\u0003\u0002\u0002\u00022\u00cb\u0003\u0002\u0002",
    "\u00024\u00ed\u0003\u0002\u0002\u00026\u00ef\u0003\u0002\u0002\u0002",
    "8\u00f9\u0003\u0002\u0002\u0002:\u0100\u0003\u0002\u0002\u0002<\u0107",
    "\u0003\u0002\u0002\u0002>\u010a\u0003\u0002\u0002\u0002@\u010d\u0003",
    "\u0002\u0002\u0002B\u0110\u0003\u0002\u0002\u0002D\u0113\u0003\u0002",
    "\u0002\u0002F\u0116\u0003\u0002\u0002\u0002H\u0118\u0003\u0002\u0002",
    "\u0002J\u011a\u0003\u0002\u0002\u0002L\u011d\u0003\u0002\u0002\u0002",
    "N\u0120\u0003\u0002\u0002\u0002P\u0123\u0003\u0002\u0002\u0002R\u0308",
    "\u0003\u0002\u0002\u0002T\u030a\u0003\u0002\u0002\u0002V\u0311\u0003",
    "\u0002\u0002\u0002XZ\u0005R*\u0002YX\u0003\u0002\u0002\u0002Z]\u0003",
    "\u0002\u0002\u0002[Y\u0003\u0002\u0002\u0002[\\\u0003\u0002\u0002\u0002",
    "\\^\u0003\u0002\u0002\u0002][\u0003\u0002\u0002\u0002^_\u0007\u0002",
    "\u0002\u0003_\u0003\u0003\u0002\u0002\u0002`a\b\u0003\u0001\u0002ab",
    "\u0005\n\u0006\u0002bc\u0007\u0086\u0002\u0002cd\u0005\u0004\u0003\u0002",
    "de\u0007\u0087\u0002\u0002es\u0003\u0002\u0002\u0002fg\t\u0002\u0002",
    "\u0002gs\u0005\u0004\u0003\thi\u0007\u0086\u0002\u0002ij\u0005\u0004",
    "\u0003\u0002jk\u0007\u0087\u0002\u0002ks\u0003\u0002\u0002\u0002lm\u0007",
    "\u0003\u0002\u0002mn\u0007\u0004\u0002\u0002no\u0005\u0004\u0003\u0002",
    "op\u0007\u0005\u0002\u0002ps\u0003\u0002\u0002\u0002qs\u0005\u0006\u0004",
    "\u0002r`\u0003\u0002\u0002\u0002rf\u0003\u0002\u0002\u0002rh\u0003\u0002",
    "\u0002\u0002rl\u0003\u0002\u0002\u0002rq\u0003\u0002\u0002\u0002s\u007f",
    "\u0003\u0002\u0002\u0002tu\f\b\u0002\u0002uv\u0007\u0090\u0002\u0002",
    "v~\u0005\u0004\u0003\twx\f\u0007\u0002\u0002xy\t\u0003\u0002\u0002y",
    "~\u0005\u0004\u0003\bz{\f\u0006\u0002\u0002{|\t\u0002\u0002\u0002|~",
    "\u0005\u0004\u0003\u0007}t\u0003\u0002\u0002\u0002}w\u0003\u0002\u0002",
    "\u0002}z\u0003\u0002\u0002\u0002~\u0081\u0003\u0002\u0002\u0002\u007f",
    "}\u0003\u0002\u0002\u0002\u007f\u0080\u0003\u0002\u0002\u0002\u0080",
    "\u0005\u0003\u0002\u0002\u0002\u0081\u007f\u0003\u0002\u0002\u0002\u0082",
    "\u0085\u0005\b\u0005\u0002\u0083\u0085\u0005\n\u0006\u0002\u0084\u0082",
    "\u0003\u0002\u0002\u0002\u0084\u0083\u0003\u0002\u0002\u0002\u0085\u0007",
    "\u0003\u0002\u0002\u0002\u0086\u0087\u0007\u0085\u0002\u0002\u0087\t",
    "\u0003\u0002\u0002\u0002\u0088\u008c\u0007\u0084\u0002\u0002\u0089\u008a",
    "\u0007\u0006\u0002\u0002\u008a\u008c\u0007\u0084\u0002\u0002\u008b\u0088",
    "\u0003\u0002\u0002\u0002\u008b\u0089\u0003\u0002\u0002\u0002\u008c\u000b",
    "\u0003\u0002\u0002\u0002\u008d\u0091\u0007\u0086\u0002\u0002\u008e\u0090",
    "\u0005\n\u0006\u0002\u008f\u008e\u0003\u0002\u0002\u0002\u0090\u0093",
    "\u0003\u0002\u0002\u0002\u0091\u008f\u0003\u0002\u0002\u0002\u0091\u0092",
    "\u0003\u0002\u0002\u0002\u0092\u0094\u0003\u0002\u0002\u0002\u0093\u0091",
    "\u0003\u0002\u0002\u0002\u0094\u0095\u0007\u0087\u0002\u0002\u0095\r",
    "\u0003\u0002\u0002\u0002\u0096\u0097\u0007\u0086\u0002\u0002\u0097\u0098",
    "\u0005\u0004\u0003\u0002\u0098\u0099\u0005\u0004\u0003\u0002\u0099\u009a",
    "\u0005\u0004\u0003\u0002\u009a\u009b\u0007\u0087\u0002\u0002\u009b\u000f",
    "\u0003\u0002\u0002\u0002\u009c\u009d\u0007\u0007\u0002\u0002\u009d\u0011",
    "\u0003\u0002\u0002\u0002\u009e\u009f\u0007\b\u0002\u0002\u009f\u00a0",
    "\u0005\n\u0006\u0002\u00a0\u0013\u0003\u0002\u0002\u0002\u00a1\u00a2",
    "\u0007\t\u0002\u0002\u00a2\u00a3\u0005\u0004\u0003\u0002\u00a3\u0015",
    "\u0003\u0002\u0002\u0002\u00a4\u00a5\u0007\n\u0002\u0002\u00a5\u00a6",
    "\u0005\n\u0006\u0002\u00a6\u0017\u0003\u0002\u0002\u0002\u00a7\u00a8",
    "\u0007\u000b\u0002\u0002\u00a8\u00a9\u0005\u0004\u0003\u0002\u00a9\u0019",
    "\u0003\u0002\u0002\u0002\u00aa\u00ab\u0007\f\u0002\u0002\u00ab\u00ac",
    "\u0005\u0004\u0003\u0002\u00ac\u001b\u0003\u0002\u0002\u0002\u00ad\u00ae",
    "\u0007\r\u0002\u0002\u00ae\u001d\u0003\u0002\u0002\u0002\u00af\u00b0",
    "\u0007\u000e\u0002\u0002\u00b0\u001f\u0003\u0002\u0002\u0002\u00b1\u00b2",
    "\u0007\u000f\u0002\u0002\u00b2!\u0003\u0002\u0002\u0002\u00b3\u00b4",
    "\u0007\u0010\u0002\u0002\u00b4\u00b5\u0005\n\u0006\u0002\u00b5#\u0003",
    "\u0002\u0002\u0002\u00b6\u00b7\u0007\u0011\u0002\u0002\u00b7\u00b8\u0005",
    "\n\u0006\u0002\u00b8%\u0003\u0002\u0002\u0002\u00b9\u00ba\u0007\u0012",
    "\u0002\u0002\u00ba\u00bb\u0005\u0004\u0003\u0002\u00bb\'\u0003\u0002",
    "\u0002\u0002\u00bc\u00bd\u0007\u0013\u0002\u0002\u00bd\u00be\u0005\u0004",
    "\u0003\u0002\u00be)\u0003\u0002\u0002\u0002\u00bf\u00c0\u0007\u0014",
    "\u0002\u0002\u00c0\u00c1\u0005\n\u0006\u0002\u00c1+\u0003\u0002\u0002",
    "\u0002\u00c2\u00c3\u0007\u0015\u0002\u0002\u00c3\u00c4\u0005\u000e\b",
    "\u0002\u00c4-\u0003\u0002\u0002\u0002\u00c5\u00c6\u0007\u0016\u0002",
    "\u0002\u00c6\u00c7\u0005\n\u0006\u0002\u00c7/\u0003\u0002\u0002\u0002",
    "\u00c8\u00c9\u0007\u0017\u0002\u0002\u00c9\u00ca\u0005\n\u0006\u0002",
    "\u00ca1\u0003\u0002\u0002\u0002\u00cb\u00cc\u0007\u0018\u0002\u0002",
    "\u00cc\u00d0\u0007\u0086\u0002\u0002\u00cd\u00cf\u0005\u0004\u0003\u0002",
    "\u00ce\u00cd\u0003\u0002\u0002\u0002\u00cf\u00d2\u0003\u0002\u0002\u0002",
    "\u00d0\u00ce\u0003\u0002\u0002\u0002\u00d0\u00d1\u0003\u0002\u0002\u0002",
    "\u00d1\u00d3\u0003\u0002\u0002\u0002\u00d2\u00d0\u0003\u0002\u0002\u0002",
    "\u00d3\u00d4\u0007\u0087\u0002\u0002\u00d43\u0003\u0002\u0002\u0002",
    "\u00d5\u00d6\u0007\u0019\u0002\u0002\u00d6\u00d7\u0007\u0086\u0002\u0002",
    "\u00d7\u00d8\u0005\u0004\u0003\u0002\u00d8\u00d9\u0005\u0004\u0003\u0002",
    "\u00d9\u00da\u0005\u0004\u0003\u0002\u00da\u00db\u0007\u0087\u0002\u0002",
    "\u00db\u00dc\u0007\u0086\u0002\u0002\u00dc\u00dd\u0005\u0004\u0003\u0002",
    "\u00dd\u00de\u0007\u0087\u0002\u0002\u00de\u00ee\u0003\u0002\u0002\u0002",
    "\u00df\u00e0\u0007\u001a\u0002\u0002\u00e0\u00e1\u0007\u0086\u0002\u0002",
    "\u00e1\u00e2\u0005\u0004\u0003\u0002\u00e2\u00e3\u0005\u0004\u0003\u0002",
    "\u00e3\u00e4\u0005\u0004\u0003\u0002\u00e4\u00e5\u0007\u0087\u0002\u0002",
    "\u00e5\u00ee\u0003\u0002\u0002\u0002\u00e6\u00e7\u0007\u001b\u0002\u0002",
    "\u00e7\u00e8\u0007\u0086\u0002\u0002\u00e8\u00e9\u0005\u0004\u0003\u0002",
    "\u00e9\u00ea\u0005\u0004\u0003\u0002\u00ea\u00eb\u0005\u0004\u0003\u0002",
    "\u00eb\u00ec\u0007\u0087\u0002\u0002\u00ec\u00ee\u0003\u0002\u0002\u0002",
    "\u00ed\u00d5\u0003\u0002\u0002\u0002\u00ed\u00df\u0003\u0002\u0002\u0002",
    "\u00ed\u00e6\u0003\u0002\u0002\u0002\u00ee5\u0003\u0002\u0002\u0002",
    "\u00ef\u00f0\u0007\u001c\u0002\u0002\u00f0\u00f1\u0007\u0086\u0002\u0002",
    "\u00f1\u00f2\u0005\u0004\u0003\u0002\u00f2\u00f3\u0005\u0004\u0003\u0002",
    "\u00f3\u00f4\u0005\u0004\u0003\u0002\u00f4\u00f5\u0007\u0087\u0002\u0002",
    "\u00f5\u00f6\u0007\u0086\u0002\u0002\u00f6\u00f7\u0005\u0004\u0003\u0002",
    "\u00f7\u00f8\u0007\u0087\u0002\u0002\u00f87\u0003\u0002\u0002\u0002",
    "\u00f9\u00fa\u0007\u001d\u0002\u0002\u00fa\u00fb\u0007\u0086\u0002\u0002",
    "\u00fb\u00fc\u0005\u0004\u0003\u0002\u00fc\u00fd\u0005\u0004\u0003\u0002",
    "\u00fd\u00fe\u0005\u0004\u0003\u0002\u00fe\u00ff\u0007\u0087\u0002\u0002",
    "\u00ff9\u0003\u0002\u0002\u0002\u0100\u0101\u0007\u0015\u0002\u0002",
    "\u0101\u0102\u0007\u0086\u0002\u0002\u0102\u0103\u0005\u0004\u0003\u0002",
    "\u0103\u0104\u0005\u0004\u0003\u0002\u0104\u0105\u0005\u0004\u0003\u0002",
    "\u0105\u0106\u0007\u0087\u0002\u0002\u0106;\u0003\u0002\u0002\u0002",
    "\u0107\u0108\u0007\u0019\u0002\u0002\u0108\u0109\u0005\u000e\b\u0002",
    "\u0109=\u0003\u0002\u0002\u0002\u010a\u010b\u0007\u001a\u0002\u0002",
    "\u010b\u010c\u0005\u000e\b\u0002\u010c?\u0003\u0002\u0002\u0002\u010d",
    "\u010e\u0007\u001e\u0002\u0002\u010e\u010f\u0005\n\u0006\u0002\u010f",
    "A\u0003\u0002\u0002\u0002\u0110\u0111\u0007\u001f\u0002\u0002\u0111",
    "\u0112\u0005\u0004\u0003\u0002\u0112C\u0003\u0002\u0002\u0002\u0113",
    "\u0114\u0007 \u0002\u0002\u0114\u0115\u0005\u0004\u0003\u0002\u0115",
    "E\u0003\u0002\u0002\u0002\u0116\u0117\u0007!\u0002\u0002\u0117G\u0003",
    "\u0002\u0002\u0002\u0118\u0119\u0007\"\u0002\u0002\u0119I\u0003\u0002",
    "\u0002\u0002\u011a\u011b\u0007#\u0002\u0002\u011b\u011c\u0005\n\u0006",
    "\u0002\u011cK\u0003\u0002\u0002\u0002\u011d\u011e\u0007$\u0002\u0002",
    "\u011e\u011f\u0005\n\u0006\u0002\u011fM\u0003\u0002\u0002\u0002\u0120",
    "\u0121\u0007%\u0002\u0002\u0121\u0122\u0005\n\u0006\u0002\u0122O\u0003",
    "\u0002\u0002\u0002\u0123\u0124\u0007&\u0002\u0002\u0124\u0125\u0005",
    "\n\u0006\u0002\u0125Q\u0003\u0002\u0002\u0002\u0126\u0127\u0007\u001e",
    "\u0002\u0002\u0127\u0128\u0005\n\u0006\u0002\u0128\u0129\u0007\u0086",
    "\u0002\u0002\u0129\u012a\u0005\u0004\u0003\u0002\u012a\u012b\u0005\u0004",
    "\u0003\u0002\u012b\u012c\u0005\u0004\u0003\u0002\u012c\u012d\u0007\u0087",
    "\u0002\u0002\u012d\u012e\u0007\'\u0002\u0002\u012e\u0309\u0003\u0002",
    "\u0002\u0002\u012f\u0130\u0007(\u0002\u0002\u0130\u0131\u0005\n\u0006",
    "\u0002\u0131\u0135\u0005\f\u0007\u0002\u0132\u0134\u0005\u0010\t\u0002",
    "\u0133\u0132\u0003\u0002\u0002\u0002\u0134\u0137\u0003\u0002\u0002\u0002",
    "\u0135\u0133\u0003\u0002\u0002\u0002\u0135\u0136\u0003\u0002\u0002\u0002",
    "\u0136\u0138\u0003\u0002\u0002\u0002\u0137\u0135\u0003\u0002\u0002\u0002",
    "\u0138\u0139\u0007)\u0002\u0002\u0139\u0309\u0003\u0002\u0002\u0002",
    "\u013a\u013b\u0007*\u0002\u0002\u013b\u013c\u0005\n\u0006\u0002\u013c",
    "\u013d\u0007+\u0002\u0002\u013d\u0143\u0005\n\u0006\u0002\u013e\u0142",
    "\u0005\u001e\u0010\u0002\u013f\u0142\u0005 \u0011\u0002\u0140\u0142",
    "\u0005F$\u0002\u0141\u013e\u0003\u0002\u0002\u0002\u0141\u013f\u0003",
    "\u0002\u0002\u0002\u0141\u0140\u0003\u0002\u0002\u0002\u0142\u0145\u0003",
    "\u0002\u0002\u0002\u0143\u0141\u0003\u0002\u0002\u0002\u0143\u0144\u0003",
    "\u0002\u0002\u0002\u0144\u0146\u0003\u0002\u0002\u0002\u0145\u0143\u0003",
    "\u0002\u0002\u0002\u0146\u0147\u0007,\u0002\u0002\u0147\u0148\u0007",
    "-\u0002\u0002\u0148\u014e\u0005\n\u0006\u0002\u0149\u014d\u0005B\"\u0002",
    "\u014a\u014d\u0005D#\u0002\u014b\u014d\u0005H%\u0002\u014c\u0149\u0003",
    "\u0002\u0002\u0002\u014c\u014a\u0003\u0002\u0002\u0002\u014c\u014b\u0003",
    "\u0002\u0002\u0002\u014d\u0150\u0003\u0002\u0002\u0002\u014e\u014c\u0003",
    "\u0002\u0002\u0002\u014e\u014f\u0003\u0002\u0002\u0002\u014f\u0151\u0003",
    "\u0002\u0002\u0002\u0150\u014e\u0003\u0002\u0002\u0002\u0151\u0152\u0007",
    ".\u0002\u0002\u0152\u0153\u0007/\u0002\u0002\u0153\u0309\u0003\u0002",
    "\u0002\u0002\u0154\u0155\u00070\u0002\u0002\u0155\u0156\u0005\n\u0006",
    "\u0002\u0156\u0157\u0005@!\u0002\u0157\u0158\u0005> \u0002\u0158\u015d",
    "\u0005<\u001f\u0002\u0159\u015c\u0005$\u0013\u0002\u015a\u015c\u0005",
    "F$\u0002\u015b\u0159\u0003\u0002\u0002\u0002\u015b\u015a\u0003\u0002",
    "\u0002\u0002\u015c\u015f\u0003\u0002\u0002\u0002\u015d\u015b\u0003\u0002",
    "\u0002\u0002\u015d\u015e\u0003\u0002\u0002\u0002\u015e\u0160\u0003\u0002",
    "\u0002\u0002\u015f\u015d\u0003\u0002\u0002\u0002\u0160\u0161\u00071",
    "\u0002\u0002\u0161\u0309\u0003\u0002\u0002\u0002\u0162\u0163\u00072",
    "\u0002\u0002\u0163\u0164\u0005\n\u0006\u0002\u0164\u0168\u0005\f\u0007",
    "\u0002\u0165\u0167\u0005\"\u0012\u0002\u0166\u0165\u0003\u0002\u0002",
    "\u0002\u0167\u016a\u0003\u0002\u0002\u0002\u0168\u0166\u0003\u0002\u0002",
    "\u0002\u0168\u0169\u0003\u0002\u0002\u0002\u0169\u016b\u0003\u0002\u0002",
    "\u0002\u016a\u0168\u0003\u0002\u0002\u0002\u016b\u016c\u00073\u0002",
    "\u0002\u016c\u0309\u0003\u0002\u0002\u0002\u016d\u016e\u00074\u0002",
    "\u0002\u016e\u016f\u0005\n\u0006\u0002\u016f\u0170\u0005\f\u0007\u0002",
    "\u0170\u0171\u00075\u0002\u0002\u0171\u0309\u0003\u0002\u0002\u0002",
    "\u0172\u0173\u00076\u0002\u0002\u0173\u0177\u0005\n\u0006\u0002\u0174",
    "\u0176\u0005R*\u0002\u0175\u0174\u0003\u0002\u0002\u0002\u0176\u0179",
    "\u0003\u0002\u0002\u0002\u0177\u0175\u0003\u0002\u0002\u0002\u0177\u0178",
    "\u0003\u0002\u0002\u0002\u0178\u017a\u0003\u0002\u0002\u0002\u0179\u0177",
    "\u0003\u0002\u0002\u0002\u017a\u017b\u00077\u0002\u0002\u017b\u0309",
    "\u0003\u0002\u0002\u0002\u017c\u017d\u00078\u0002\u0002\u017d\u0181",
    "\u0005\n\u0006\u0002\u017e\u0180\u0005R*\u0002\u017f\u017e\u0003\u0002",
    "\u0002\u0002\u0180\u0183\u0003\u0002\u0002\u0002\u0181\u017f\u0003\u0002",
    "\u0002\u0002\u0181\u0182\u0003\u0002\u0002\u0002\u0182\u0184\u0003\u0002",
    "\u0002\u0002\u0183\u0181\u0003\u0002\u0002\u0002\u0184\u0185\u00079",
    "\u0002\u0002\u0185\u0309\u0003\u0002\u0002\u0002\u0186\u0187\u0007:",
    "\u0002\u0002\u0187\u0188\u0005\n\u0006\u0002\u0188\u0189\u0007\u0086",
    "\u0002\u0002\u0189\u018a\u0005\u0004\u0003\u0002\u018a\u018b\u0005\u0004",
    "\u0003\u0002\u018b\u018c\u0007\u0087\u0002\u0002\u018c\u018d\u0007;",
    "\u0002\u0002\u018d\u0309\u0003\u0002\u0002\u0002\u018e\u018f\u0007<",
    "\u0002\u0002\u018f\u0190\u0005\n\u0006\u0002\u0190\u0191\u0007\u0086",
    "\u0002\u0002\u0191\u0192\u0005\u0004\u0003\u0002\u0192\u0193\u0005\u0004",
    "\u0003\u0002\u0193\u0194\u0005\u0004\u0003\u0002\u0194\u0195\u0007\u0087",
    "\u0002\u0002\u0195\u0196\u0007=\u0002\u0002\u0196\u0309\u0003\u0002",
    "\u0002\u0002\u0197\u0198\u0007>\u0002\u0002\u0198\u0199\u0005\n\u0006",
    "\u0002\u0199\u019a\u0007\u0086\u0002\u0002\u019a\u019b\u0005\u0004\u0003",
    "\u0002\u019b\u019c\u0005\u0004\u0003\u0002\u019c\u019d\u0005\u0004\u0003",
    "\u0002\u019d\u019e\u0005\u0004\u0003\u0002\u019e\u019f\u0005\u0004\u0003",
    "\u0002\u019f\u01a0\u0005\u0004\u0003\u0002\u01a0\u01a1\u0007\u0087\u0002",
    "\u0002\u01a1\u01a2\u0007?\u0002\u0002\u01a2\u0309\u0003\u0002\u0002",
    "\u0002\u01a3\u01a4\u0007@\u0002\u0002\u01a4\u01a5\u0005\n\u0006\u0002",
    "\u01a5\u01a6\u0007\u0086\u0002\u0002\u01a6\u01a7\u0005\u0004\u0003\u0002",
    "\u01a7\u01a8\u0005\u0004\u0003\u0002\u01a8\u01a9\u0005\u0004\u0003\u0002",
    "\u01a9\u01aa\u0005\u0004\u0003\u0002\u01aa\u01ab\u0005\u0004\u0003\u0002",
    "\u01ab\u01ac\u0005\u0004\u0003\u0002\u01ac\u01ad\u0005\u0004\u0003\u0002",
    "\u01ad\u01ae\u0007\u0087\u0002\u0002\u01ae\u01af\u0007A\u0002\u0002",
    "\u01af\u0309\u0003\u0002\u0002\u0002\u01b0\u01b1\u0007B\u0002\u0002",
    "\u01b1\u01b2\u0005\n\u0006\u0002\u01b2\u01b3\u0007\u0086\u0002\u0002",
    "\u01b3\u01b4\u0005\u0004\u0003\u0002\u01b4\u01b5\u0005\u0004\u0003\u0002",
    "\u01b5\u01b6\u0005\u0004\u0003\u0002\u01b6\u01b7\u0005\u0004\u0003\u0002",
    "\u01b7\u01b8\u0007\u0087\u0002\u0002\u01b8\u01b9\u0007C\u0002\u0002",
    "\u01b9\u0309\u0003\u0002\u0002\u0002\u01ba\u01bb\u0007D\u0002\u0002",
    "\u01bb\u01bc\u0005\n\u0006\u0002\u01bc\u01bd\u0007\u0086\u0002\u0002",
    "\u01bd\u01be\u0005\u0004\u0003\u0002\u01be\u01bf\u0005\u0004\u0003\u0002",
    "\u01bf\u01c0\u0005\u0004\u0003\u0002\u01c0\u01c1\u0005\u0004\u0003\u0002",
    "\u01c1\u01c2\u0005\u0004\u0003\u0002\u01c2\u01c3\u0005\u0004\u0003\u0002",
    "\u01c3\u01c4\u0007\u0087\u0002\u0002\u01c4\u01c5\u0007E\u0002\u0002",
    "\u01c5\u0309\u0003\u0002\u0002\u0002\u01c6\u01c7\u0007F\u0002\u0002",
    "\u01c7\u01c8\u0005\n\u0006\u0002\u01c8\u01c9\u0007\u0086\u0002\u0002",
    "\u01c9\u01ca\u0005\u0004\u0003\u0002\u01ca\u01cb\u0005\u0004\u0003\u0002",
    "\u01cb\u01cc\u0005\u0004\u0003\u0002\u01cc\u01cd\u0005\u0004\u0003\u0002",
    "\u01cd\u01ce\u0005\u0004\u0003\u0002\u01ce\u01cf\u0005\u0004\u0003\u0002",
    "\u01cf\u01d0\u0005\u0004\u0003\u0002\u01d0\u01d1\u0007\u0087\u0002\u0002",
    "\u01d1\u01d2\u0007G\u0002\u0002\u01d2\u0309\u0003\u0002\u0002\u0002",
    "\u01d3\u01d4\u0007H\u0002\u0002\u01d4\u01d5\u0005\n\u0006\u0002\u01d5",
    "\u01d6\u0007\u0086\u0002\u0002\u01d6\u01d7\u0005\u0004\u0003\u0002\u01d7",
    "\u01d8\u0005\u0004\u0003\u0002\u01d8\u01d9\u0005\u0004\u0003\u0002\u01d9",
    "\u01da\u0005\u0004\u0003\u0002\u01da\u01db\u0007\u0087\u0002\u0002\u01db",
    "\u01dc\u0007I\u0002\u0002\u01dc\u0309\u0003\u0002\u0002\u0002\u01dd",
    "\u01de\u0007J\u0002\u0002\u01de\u01df\u0005\n\u0006\u0002\u01df\u01e0",
    "\u0007\u0086\u0002\u0002\u01e0\u01e1\u0005\u0004\u0003\u0002\u01e1\u01e2",
    "\u0005\u0004\u0003\u0002\u01e2\u01e3\u0005\u0004\u0003\u0002\u01e3\u01e4",
    "\u0005\u0004\u0003\u0002\u01e4\u01e5\u0007\u0087\u0002\u0002\u01e5\u01e6",
    "\u0007K\u0002\u0002\u01e6\u0309\u0003\u0002\u0002\u0002\u01e7\u01e8",
    "\u0007L\u0002\u0002\u01e8\u01e9\u0005\n\u0006\u0002\u01e9\u01ea\u0007",
    "\u0086\u0002\u0002\u01ea\u01eb\u0005\u0004\u0003\u0002\u01eb\u01ec\u0005",
    "\u0004\u0003\u0002\u01ec\u01ed\u0005\u0004\u0003\u0002\u01ed\u01ee\u0005",
    "\u0004\u0003\u0002\u01ee\u01ef\u0007\u0087\u0002\u0002\u01ef\u01f0\u0007",
    "M\u0002\u0002\u01f0\u0309\u0003\u0002\u0002\u0002\u01f1\u01f2\u0007",
    "N\u0002\u0002\u01f2\u01f3\u0005\n\u0006\u0002\u01f3\u01f4\u0007\u0086",
    "\u0002\u0002\u01f4\u01f5\u0005\u0004\u0003\u0002\u01f5\u01f6\u0005\u0004",
    "\u0003\u0002\u01f6\u01f7\u0005\u0004\u0003\u0002\u01f7\u01f8\u0005\u0004",
    "\u0003\u0002\u01f8\u01f9\u0007\u0087\u0002\u0002\u01f9\u01fa\u0007O",
    "\u0002\u0002\u01fa\u0309\u0003\u0002\u0002\u0002\u01fb\u01fc\u0007P",
    "\u0002\u0002\u01fc\u01fd\u0005\n\u0006\u0002\u01fd\u01fe\u0007\u0086",
    "\u0002\u0002\u01fe\u01ff\u0005\u0004\u0003\u0002\u01ff\u0200\u0005\u0004",
    "\u0003\u0002\u0200\u0201\u0005\u0004\u0003\u0002\u0201\u0202\u0005\u0004",
    "\u0003\u0002\u0202\u0203\u0005\u0004\u0003\u0002\u0203\u0204\u0005\u0004",
    "\u0003\u0002\u0204\u0205\u0005\u0004\u0003\u0002\u0205\u0206\u0007\u0087",
    "\u0002\u0002\u0206\u0207\u0007Q\u0002\u0002\u0207\u0309\u0003\u0002",
    "\u0002\u0002\u0208\u0209\u0007R\u0002\u0002\u0209\u020a\u0005\n\u0006",
    "\u0002\u020a\u020b\u0007\u0086\u0002\u0002\u020b\u020c\u0005\u0004\u0003",
    "\u0002\u020c\u020d\u0005\u0004\u0003\u0002\u020d\u020e\u0005\u0004\u0003",
    "\u0002\u020e\u020f\u0005\u0004\u0003\u0002\u020f\u0210\u0005\u0004\u0003",
    "\u0002\u0210\u0211\u0005\u0004\u0003\u0002\u0211\u0212\u0005\u0004\u0003",
    "\u0002\u0212\u0213\u0007\u0087\u0002\u0002\u0213\u0214\u0007S\u0002",
    "\u0002\u0214\u0309\u0003\u0002\u0002\u0002\u0215\u0216\u0007T\u0002",
    "\u0002\u0216\u0217\u0005\n\u0006\u0002\u0217\u0218\u0005J&\u0002\u0218",
    "\u0219\u0007\u0086\u0002\u0002\u0219\u021a\u0005\u0004\u0003\u0002\u021a",
    "\u021b\u0005\u0004\u0003\u0002\u021b\u021c\u0005\u0004\u0003\u0002\u021c",
    "\u021d\u0005\u0004\u0003\u0002\u021d\u021e\u0005\u0004\u0003\u0002\u021e",
    "\u021f\u0005\u0004\u0003\u0002\u021f\u0220\u0007\u0087\u0002\u0002\u0220",
    "\u0221\u0007U\u0002\u0002\u0221\u0309\u0003\u0002\u0002\u0002\u0222",
    "\u0223\u0007V\u0002\u0002\u0223\u0224\u0005\n\u0006\u0002\u0224\u0225",
    "\u0005L\'\u0002\u0225\u0226\u0005N(\u0002\u0226\u0227\u0005P)\u0002",
    "\u0227\u0228\u0007\u0086\u0002\u0002\u0228\u0229\u0005\u0004\u0003\u0002",
    "\u0229\u022a\u0005\u0004\u0003\u0002\u022a\u022b\u0005\u0004\u0003\u0002",
    "\u022b\u022c\u0005\u0004\u0003\u0002\u022c\u022d\u0005\u0004\u0003\u0002",
    "\u022d\u022e\u0005\u0004\u0003\u0002\u022e\u022f\u0007\u0087\u0002\u0002",
    "\u022f\u0230\u0007W\u0002\u0002\u0230\u0309\u0003\u0002\u0002\u0002",
    "\u0231\u0232\u0007X\u0002\u0002\u0232\u0233\u0005\n\u0006\u0002\u0233",
    "\u0234\u0005J&\u0002\u0234\u0235\u0007\u0086\u0002\u0002\u0235\u0236",
    "\u0005\u0004\u0003\u0002\u0236\u0237\u0005\u0004\u0003\u0002\u0237\u0238",
    "\u0005\u0004\u0003\u0002\u0238\u0239\u0005\u0004\u0003\u0002\u0239\u023a",
    "\u0005\u0004\u0003\u0002\u023a\u023b\u0005\u0004\u0003\u0002\u023b\u023c",
    "\u0005\u0004\u0003\u0002\u023c\u023d\u0005\u0004\u0003\u0002\u023d\u023e",
    "\u0005\u0004\u0003\u0002\u023e\u023f\u0007\u0087\u0002\u0002\u023f\u0240",
    "\u0007Y\u0002\u0002\u0240\u0309\u0003\u0002\u0002\u0002\u0241\u0242",
    "\u0007Z\u0002\u0002\u0242\u0243\u0005\n\u0006\u0002\u0243\u0247\u0005",
    "\f\u0007\u0002\u0244\u0246\u0005&\u0014\u0002\u0245\u0244\u0003\u0002",
    "\u0002\u0002\u0246\u0249\u0003\u0002\u0002\u0002\u0247\u0245\u0003\u0002",
    "\u0002\u0002\u0247\u0248\u0003\u0002\u0002\u0002\u0248\u024a\u0003\u0002",
    "\u0002\u0002\u0249\u0247\u0003\u0002\u0002\u0002\u024a\u024b\u0007[",
    "\u0002\u0002\u024b\u0309\u0003\u0002\u0002\u0002\u024c\u024d\u0007\\",
    "\u0002\u0002\u024d\u0251\u0005\n\u0006\u0002\u024e\u0250\u0005(\u0015",
    "\u0002\u024f\u024e\u0003\u0002\u0002\u0002\u0250\u0253\u0003\u0002\u0002",
    "\u0002\u0251\u024f\u0003\u0002\u0002\u0002\u0251\u0252\u0003\u0002\u0002",
    "\u0002\u0252\u0254\u0003\u0002\u0002\u0002\u0253\u0251\u0003\u0002\u0002",
    "\u0002\u0254\u0258\u0005\f\u0007\u0002\u0255\u0257\u0005&\u0014\u0002",
    "\u0256\u0255\u0003\u0002\u0002\u0002\u0257\u025a\u0003\u0002\u0002\u0002",
    "\u0258\u0256\u0003\u0002\u0002\u0002\u0258\u0259\u0003\u0002\u0002\u0002",
    "\u0259\u025b\u0003\u0002\u0002\u0002\u025a\u0258\u0003\u0002\u0002\u0002",
    "\u025b\u025c\u0007]\u0002\u0002\u025c\u0309\u0003\u0002\u0002\u0002",
    "\u025d\u025e\u0007^\u0002\u0002\u025e\u025f\u0005\n\u0006\u0002\u025f",
    "\u0265\u0005\n\u0006\u0002\u0260\u0264\u0005\"\u0012\u0002\u0261\u0264",
    "\u00054\u001b\u0002\u0262\u0264\u0005\u001c\u000f\u0002\u0263\u0260",
    "\u0003\u0002\u0002\u0002\u0263\u0261\u0003\u0002\u0002\u0002\u0263\u0262",
    "\u0003\u0002\u0002\u0002\u0264\u0267\u0003\u0002\u0002\u0002\u0265\u0263",
    "\u0003\u0002\u0002\u0002\u0265\u0266\u0003\u0002\u0002\u0002\u0266\u0268",
    "\u0003\u0002\u0002\u0002\u0267\u0265\u0003\u0002\u0002\u0002\u0268\u0269",
    "\u0007_\u0002\u0002\u0269\u0309\u0003\u0002\u0002\u0002\u026a\u026b",
    "\u0007\u0010\u0002\u0002\u026b\u026c\u0005\n\u0006\u0002\u026c\u026d",
    "\u0005:\u001e\u0002\u026d\u026e\u0007`\u0002\u0002\u026e\u0309\u0003",
    "\u0002\u0002\u0002\u026f\u0270\u0007a\u0002\u0002\u0270\u0271\u0005",
    "\n\u0006\u0002\u0271\u0272\u0007\u0086\u0002\u0002\u0272\u0273\u0005",
    "\u0004\u0003\u0002\u0273\u0274\u0005\u0004\u0003\u0002\u0274\u0275\u0005",
    "\u0004\u0003\u0002\u0275\u0276\u0007\u0087\u0002\u0002\u0276\u0277\u0007",
    "b\u0002\u0002\u0277\u0309\u0003\u0002\u0002\u0002\u0278\u0279\u0007",
    "c\u0002\u0002\u0279\u027a\u0005\"\u0012\u0002\u027a\u027b\u0007d\u0002",
    "\u0002\u027b\u0309\u0003\u0002\u0002\u0002\u027c\u027d\u0007e\u0002",
    "\u0002\u027d\u027e\u0005\"\u0012\u0002\u027e\u027f\u0007f\u0002\u0002",
    "\u027f\u0309\u0003\u0002\u0002\u0002\u0280\u0281\u0007g\u0002\u0002",
    "\u0281\u0282\u0005\"\u0012\u0002\u0282\u0283\u0007h\u0002\u0002\u0283",
    "\u0309\u0003\u0002\u0002\u0002\u0284\u0285\u0007i\u0002\u0002\u0285",
    "\u0286\u0005\"\u0012\u0002\u0286\u0287\u0007j\u0002\u0002\u0287\u0309",
    "\u0003\u0002\u0002\u0002\u0288\u0289\u0007k\u0002\u0002\u0289\u028a",
    "\u0005\"\u0012\u0002\u028a\u028b\u0007l\u0002\u0002\u028b\u0309\u0003",
    "\u0002\u0002\u0002\u028c\u028d\u0007m\u0002\u0002\u028d\u028e\u0005",
    "\"\u0012\u0002\u028e\u028f\u0007n\u0002\u0002\u028f\u0309\u0003\u0002",
    "\u0002\u0002\u0290\u0291\u0007o\u0002\u0002\u0291\u0292\u0005\"\u0012",
    "\u0002\u0292\u0293\u0007p\u0002\u0002\u0293\u0309\u0003\u0002\u0002",
    "\u0002\u0294\u0295\u0007q\u0002\u0002\u0295\u0299\u0005\n\u0006\u0002",
    "\u0296\u0298\u0005T+\u0002\u0297\u0296\u0003\u0002\u0002\u0002\u0298",
    "\u029b\u0003\u0002\u0002\u0002\u0299\u0297\u0003\u0002\u0002\u0002\u0299",
    "\u029a\u0003\u0002\u0002\u0002\u029a\u029c\u0003\u0002\u0002\u0002\u029b",
    "\u0299\u0003\u0002\u0002\u0002\u029c\u029d\u0007r\u0002\u0002\u029d",
    "\u0309\u0003\u0002\u0002\u0002\u029e\u02a2\u0007s\u0002\u0002\u029f",
    "\u02a1\u0005V,\u0002\u02a0\u029f\u0003\u0002\u0002\u0002\u02a1\u02a4",
    "\u0003\u0002\u0002\u0002\u02a2\u02a0\u0003\u0002\u0002\u0002\u02a2\u02a3",
    "\u0003\u0002\u0002\u0002\u02a3\u02a5\u0003\u0002\u0002\u0002\u02a4\u02a2",
    "\u0003\u0002\u0002\u0002\u02a5\u0309\u0007t\u0002\u0002\u02a6\u02a7",
    "\u0007u\u0002\u0002\u02a7\u02ab\u0005\n\u0006\u0002\u02a8\u02aa\u0005",
    "\u0012\n\u0002\u02a9\u02a8\u0003\u0002\u0002\u0002\u02aa\u02ad\u0003",
    "\u0002\u0002\u0002\u02ab\u02a9\u0003\u0002\u0002\u0002\u02ab\u02ac\u0003",
    "\u0002\u0002\u0002\u02ac\u02b1\u0003\u0002\u0002\u0002\u02ad\u02ab\u0003",
    "\u0002\u0002\u0002\u02ae\u02b0\u0005\u0014\u000b\u0002\u02af\u02ae\u0003",
    "\u0002\u0002\u0002\u02b0\u02b3\u0003\u0002\u0002\u0002\u02b1\u02af\u0003",
    "\u0002\u0002\u0002\u02b1\u02b2\u0003\u0002\u0002\u0002\u02b2\u02b7\u0003",
    "\u0002\u0002\u0002\u02b3\u02b1\u0003\u0002\u0002\u0002\u02b4\u02b6\u0005",
    "R*\u0002\u02b5\u02b4\u0003\u0002\u0002\u0002\u02b6\u02b9\u0003\u0002",
    "\u0002\u0002\u02b7\u02b5\u0003\u0002\u0002\u0002\u02b7\u02b8\u0003\u0002",
    "\u0002\u0002\u02b8\u02ba\u0003\u0002\u0002\u0002\u02b9\u02b7\u0003\u0002",
    "\u0002\u0002\u02ba\u02bb\u0007v\u0002\u0002\u02bb\u0309\u0003\u0002",
    "\u0002\u0002\u02bc\u02bd\u0007w\u0002\u0002\u02bd\u02bf\u0005\u0004",
    "\u0003\u0002\u02be\u02c0\u0005\f\u0007\u0002\u02bf\u02be\u0003\u0002",
    "\u0002\u0002\u02c0\u02c1\u0003\u0002\u0002\u0002\u02c1\u02bf\u0003\u0002",
    "\u0002\u0002\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2\u02c3\u0003\u0002",
    "\u0002\u0002\u02c3\u02c4\u0007x\u0002\u0002\u02c4\u0309\u0003\u0002",
    "\u0002\u0002\u02c5\u02c6\u0007y\u0002\u0002\u02c6\u02ca\u0005\n\u0006",
    "\u0002\u02c7\u02c9\u0005\u0016\f\u0002\u02c8\u02c7\u0003\u0002\u0002",
    "\u0002\u02c9\u02cc\u0003\u0002\u0002\u0002\u02ca\u02c8\u0003\u0002\u0002",
    "\u0002\u02ca\u02cb\u0003\u0002\u0002\u0002\u02cb\u02d0\u0003\u0002\u0002",
    "\u0002\u02cc\u02ca\u0003\u0002\u0002\u0002\u02cd\u02cf\u0005\u0018\r",
    "\u0002\u02ce\u02cd\u0003\u0002\u0002\u0002\u02cf\u02d2\u0003\u0002\u0002",
    "\u0002\u02d0\u02ce\u0003\u0002\u0002\u0002\u02d0\u02d1\u0003\u0002\u0002",
    "\u0002\u02d1\u02d6\u0003\u0002\u0002\u0002\u02d2\u02d0\u0003\u0002\u0002",
    "\u0002\u02d3\u02d5\u0005\u001a\u000e\u0002\u02d4\u02d3\u0003\u0002\u0002",
    "\u0002\u02d5\u02d8\u0003\u0002\u0002\u0002\u02d6\u02d4\u0003\u0002\u0002",
    "\u0002\u02d6\u02d7\u0003\u0002\u0002\u0002\u02d7\u02dc\u0003\u0002\u0002",
    "\u0002\u02d8\u02d6\u0003\u0002\u0002\u0002\u02d9\u02db\u0005R*\u0002",
    "\u02da\u02d9\u0003\u0002\u0002\u0002\u02db\u02de\u0003\u0002\u0002\u0002",
    "\u02dc\u02da\u0003\u0002\u0002\u0002\u02dc\u02dd\u0003\u0002\u0002\u0002",
    "\u02dd\u02df\u0003\u0002\u0002\u0002\u02de\u02dc\u0003\u0002\u0002\u0002",
    "\u02df\u02e0\u0007z\u0002\u0002\u02e0\u0309\u0003\u0002\u0002\u0002",
    "\u02e1\u02e2\u0007{\u0002\u0002\u02e2\u02e3\u0005\n\u0006\u0002\u02e3",
    "\u02e4\u0007|\u0002\u0002\u02e4\u0309\u0003\u0002\u0002\u0002\u02e5",
    "\u02e6\u0007}\u0002\u0002\u02e6\u02e7\u0005\n\u0006\u0002\u02e7\u02e8",
    "\u0005*\u0016\u0002\u02e8\u02e9\u0005,\u0017\u0002\u02e9\u02ea\u0007",
    "~\u0002\u0002\u02ea\u0309\u0003\u0002\u0002\u0002\u02eb\u02ec\u0007",
    "\u007f\u0002\u0002\u02ec\u02ed\u0005\n\u0006\u0002\u02ed\u02ee\u0005",
    ".\u0018\u0002\u02ee\u02f2\u00052\u001a\u0002\u02ef\u02f1\u00058\u001d",
    "\u0002\u02f0\u02ef\u0003\u0002\u0002\u0002\u02f1\u02f4\u0003\u0002\u0002",
    "\u0002\u02f2\u02f0\u0003\u0002\u0002\u0002\u02f2\u02f3\u0003\u0002\u0002",
    "\u0002\u02f3\u02f8\u0003\u0002\u0002\u0002\u02f4\u02f2\u0003\u0002\u0002",
    "\u0002\u02f5\u02f7\u00056\u001c\u0002\u02f6\u02f5\u0003\u0002\u0002",
    "\u0002\u02f7\u02fa\u0003\u0002\u0002\u0002\u02f8\u02f6\u0003\u0002\u0002",
    "\u0002\u02f8\u02f9\u0003\u0002\u0002\u0002\u02f9\u02fb\u0003\u0002\u0002",
    "\u0002\u02fa\u02f8\u0003\u0002\u0002\u0002\u02fb\u02fc\u0007\u0080\u0002",
    "\u0002\u02fc\u0309\u0003\u0002\u0002\u0002\u02fd\u02fe\u0007\u0081\u0002",
    "\u0002\u02fe\u02ff\u0005\n\u0006\u0002\u02ff\u0300\u00050\u0019\u0002",
    "\u0300\u0301\u0007\u0086\u0002\u0002\u0301\u0302\u0005\u0004\u0003\u0002",
    "\u0302\u0303\u0005\u0004\u0003\u0002\u0303\u0304\u0005\u0004\u0003\u0002",
    "\u0304\u0305\u0005\u0004\u0003\u0002\u0305\u0306\u0007\u0087\u0002\u0002",
    "\u0306\u0307\u0007\u0082\u0002\u0002\u0307\u0309\u0003\u0002\u0002\u0002",
    "\u0308\u0126\u0003\u0002\u0002\u0002\u0308\u012f\u0003\u0002\u0002\u0002",
    "\u0308\u013a\u0003\u0002\u0002\u0002\u0308\u0154\u0003\u0002\u0002\u0002",
    "\u0308\u0162\u0003\u0002\u0002\u0002\u0308\u016d\u0003\u0002\u0002\u0002",
    "\u0308\u0172\u0003\u0002\u0002\u0002\u0308\u017c\u0003\u0002\u0002\u0002",
    "\u0308\u0186\u0003\u0002\u0002\u0002\u0308\u018e\u0003\u0002\u0002\u0002",
    "\u0308\u0197\u0003\u0002\u0002\u0002\u0308\u01a3\u0003\u0002\u0002\u0002",
    "\u0308\u01b0\u0003\u0002\u0002\u0002\u0308\u01ba\u0003\u0002\u0002\u0002",
    "\u0308\u01c6\u0003\u0002\u0002\u0002\u0308\u01d3\u0003\u0002\u0002\u0002",
    "\u0308\u01dd\u0003\u0002\u0002\u0002\u0308\u01e7\u0003\u0002\u0002\u0002",
    "\u0308\u01f1\u0003\u0002\u0002\u0002\u0308\u01fb\u0003\u0002\u0002\u0002",
    "\u0308\u0208\u0003\u0002\u0002\u0002\u0308\u0215\u0003\u0002\u0002\u0002",
    "\u0308\u0222\u0003\u0002\u0002\u0002\u0308\u0231\u0003\u0002\u0002\u0002",
    "\u0308\u0241\u0003\u0002\u0002\u0002\u0308\u024c\u0003\u0002\u0002\u0002",
    "\u0308\u025d\u0003\u0002\u0002\u0002\u0308\u026a\u0003\u0002\u0002\u0002",
    "\u0308\u026f\u0003\u0002\u0002\u0002\u0308\u0278\u0003\u0002\u0002\u0002",
    "\u0308\u027c\u0003\u0002\u0002\u0002\u0308\u0280\u0003\u0002\u0002\u0002",
    "\u0308\u0284\u0003\u0002\u0002\u0002\u0308\u0288\u0003\u0002\u0002\u0002",
    "\u0308\u028c\u0003\u0002\u0002\u0002\u0308\u0290\u0003\u0002\u0002\u0002",
    "\u0308\u0294\u0003\u0002\u0002\u0002\u0308\u029e\u0003\u0002\u0002\u0002",
    "\u0308\u02a6\u0003\u0002\u0002\u0002\u0308\u02bc\u0003\u0002\u0002\u0002",
    "\u0308\u02c5\u0003\u0002\u0002\u0002\u0308\u02e1\u0003\u0002\u0002\u0002",
    "\u0308\u02e5\u0003\u0002\u0002\u0002\u0308\u02eb\u0003\u0002\u0002\u0002",
    "\u0308\u02fd\u0003\u0002\u0002\u0002\u0309S\u0003\u0002\u0002\u0002",
    "\u030a\u030b\u0007\u0083\u0002\u0002\u030b\u030c\u0005\n\u0006\u0002",
    "\u030c\u030d\u0005\u0004\u0003\u0002\u030d\u030e\u0005\u0004\u0003\u0002",
    "\u030e\u030f\u0005\u0004\u0003\u0002\u030f\u0310\u0005\u0004\u0003\u0002",
    "\u0310U\u0003\u0002\u0002\u0002\u0311\u0312\u00072\u0002\u0002\u0312",
    "\u0313\u0005\n\u0006\u0002\u0313\u0314\u00073\u0002\u0002\u0314W\u0003",
    "\u0002\u0002\u0002\'[r}\u007f\u0084\u008b\u0091\u00d0\u00ed\u0135\u0141",
    "\u0143\u014c\u014e\u015b\u015d\u0168\u0177\u0181\u0247\u0251\u0258\u0263",
    "\u0265\u0299\u02a2\u02ab\u02b1\u02b7\u02c1\u02ca\u02d0\u02d6\u02dc\u02f2",
    "\u02f8\u0308"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class NomParser extends antlr4.Parser {

    static grammarFileName = "Nom.g4";
    static literalNames = [ null, "'{'", "'expr'", "'}'", "'$'", "'closed'", 
                            "'sd_type'", "'sd_level'", "'offset_type'", 
                            "'height'", "'width'", "'hidden'", "'begincap'", 
                            "'endcap'", "'surface'", "'cross'", "'segs'", 
                            "'order'", "'type'", "'color'", "'projection'", 
                            "'cameraID'", "'frustum'", "'rotate'", "'scale'", 
                            "'translate'", "'crotate'", "'ctranslate'", 
                            "'point'", "'azimuth'", "'twist'", "'reverse'", 
                            "'mintorsion'", "'func'", "'funcX'", "'funcY'", 
                            "'funcZ'", "'endpoint'", "'polyline'", "'endpolyline'", 
                            "'sweep'", "'crosssection'", "'endcrosssection'", 
                            "'path'", "'endpath'", "'endsweep'", "'controlpoint'", 
                            "'endcontrolpoint'", "'face'", "'endface'", 
                            "'object'", "'endobject'", "'mesh'", "'endmesh'", 
                            "'group'", "'endgroup'", "'circle'", "'endcircle'", 
                            "'spiral'", "'endspiral'", "'sphere'", "'endsphere'", 
                            "'ellipsoid'", "'endellipsoid'", "'cylinder'", 
                            "'endcylinder'", "'hyperboloid'", "'endhyperboloid'", 
                            "'dupin'", "'enddupin'", "'mobiusstrip'", "'endmobiusstrip'", 
                            "'helix'", "'endhelix'", "'funnel'", "'endfunnel'", 
                            "'tunnel'", "'endtunnel'", "'torusknot'", "'endtorusknot'", 
                            "'torus'", "'endtorus'", "'gencartesiansurf'", 
                            "'endgencartesiansurf'", "'genparametricsurf'", 
                            "'endgenparametricsurf'", "'genimplicitsurf'", 
                            "'endgenimplicitsurf'", "'beziercurve'", "'endbeziercurve'", 
                            "'bspline'", "'endbspline'", "'instance'", "'endinstance'", 
                            "'endsurface'", "'background'", "'endbackground'", 
                            "'foreground'", "'endforeground'", "'insidefaces'", 
                            "'endinsidefaces'", "'outsidefaces'", "'endoutsidefaces'", 
                            "'offsetfaces'", "'endoffsetfaces'", "'frontfaces'", 
                            "'endfrontfaces'", "'backfaces'", "'endbackfaces'", 
                            "'rimfaces'", "'endrimfaces'", "'bank'", "'endbank'", 
                            "'delete'", "'enddelete'", "'subdivision'", 
                            "'endsubdivision'", "'sharp'", "'endsharp'", 
                            "'offset'", "'endoffset'", "'include'", "'endinclude'", 
                            "'light'", "'endlight'", "'camera'", "'endcamera'", 
                            "'viewport'", "'endviewport'", "'set'", null, 
                            null, "'('", "')'", "'+'", "'-'", "'*'", "'/'", 
                            "'>'", "'<'", "'='", "'.'", "'^'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, "IDENT", "SCIENTIFIC_NUMBER", "LPAREN", 
                             "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", 
                             "GT", "LT", "EQ", "POINT", "POW", "WS", "COMMENT", 
                             "LINE_COMMENT" ];
    static ruleNames = [ "file", "expression", "atom", "scientific", "ident", 
                         "idList", "vector3", "argClosed", "argSdFlag", 
                         "argSdLevel", "argOffsetFlag", "argHeight", "argWidth", 
                         "argHidden", "argBeginCap", "argEndCap", "argSurface", 
                         "argCross", "argSegs", "argOrder", "argLightType", 
                         "argLightColor", "argCameraProjection", "argCameraID", 
                         "argCameraFrustum", "argTransform", "argRotate", 
                         "argTranslate", "argColor", "argControlRotate", 
                         "argControlScale", "argPoint", "argAzimuth", "argTwist", 
                         "argReverse", "argMintorsion", "argFunc", "argFuncX", 
                         "argFuncY", "argFuncZ", "command", "set", "deleteFace" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = NomParser.ruleNames;
        this.literalNames = NomParser.literalNames;
        this.symbolicNames = NomParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 1:
    	    		return this.expression_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    expression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 6);
    		case 1:
    			return this.precpred(this._ctx, 5);
    		case 2:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	file() {
	    let localctx = new FileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, NomParser.RULE_file);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 89;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===NomParser.T__13 || _la===NomParser.T__27 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (NomParser.T__37 - 38)) | (1 << (NomParser.T__39 - 38)) | (1 << (NomParser.T__45 - 38)) | (1 << (NomParser.T__47 - 38)) | (1 << (NomParser.T__49 - 38)) | (1 << (NomParser.T__51 - 38)) | (1 << (NomParser.T__53 - 38)) | (1 << (NomParser.T__55 - 38)) | (1 << (NomParser.T__57 - 38)) | (1 << (NomParser.T__59 - 38)) | (1 << (NomParser.T__61 - 38)) | (1 << (NomParser.T__63 - 38)) | (1 << (NomParser.T__65 - 38)) | (1 << (NomParser.T__67 - 38)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (NomParser.T__69 - 70)) | (1 << (NomParser.T__71 - 70)) | (1 << (NomParser.T__73 - 70)) | (1 << (NomParser.T__75 - 70)) | (1 << (NomParser.T__77 - 70)) | (1 << (NomParser.T__79 - 70)) | (1 << (NomParser.T__81 - 70)) | (1 << (NomParser.T__83 - 70)) | (1 << (NomParser.T__85 - 70)) | (1 << (NomParser.T__87 - 70)) | (1 << (NomParser.T__89 - 70)) | (1 << (NomParser.T__91 - 70)) | (1 << (NomParser.T__94 - 70)) | (1 << (NomParser.T__96 - 70)) | (1 << (NomParser.T__98 - 70)) | (1 << (NomParser.T__100 - 70)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (NomParser.T__102 - 103)) | (1 << (NomParser.T__104 - 103)) | (1 << (NomParser.T__106 - 103)) | (1 << (NomParser.T__108 - 103)) | (1 << (NomParser.T__110 - 103)) | (1 << (NomParser.T__112 - 103)) | (1 << (NomParser.T__114 - 103)) | (1 << (NomParser.T__116 - 103)) | (1 << (NomParser.T__118 - 103)) | (1 << (NomParser.T__120 - 103)) | (1 << (NomParser.T__122 - 103)) | (1 << (NomParser.T__124 - 103)) | (1 << (NomParser.T__126 - 103)))) !== 0)) {
	            this.state = 86;
	            this.command();
	            this.state = 91;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 92;
	        this.match(NomParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expression(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExpressionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 2;
	    this.enterRecursionRule(localctx, 2, NomParser.RULE_expression, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 112;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CallContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 95;
	            this.ident();
	            this.state = 96;
	            this.match(NomParser.LPAREN);
	            this.state = 97;
	            this.expression(0);
	            this.state = 98;
	            this.match(NomParser.RPAREN);
	            break;

	        case 2:
	            localctx = new UnaryOpContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 100;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===NomParser.PLUS || _la===NomParser.MINUS)) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 101;
	            this.expression(7);
	            break;

	        case 3:
	            localctx = new SubExpParenContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 102;
	            this.match(NomParser.LPAREN);
	            this.state = 103;
	            this.expression(0);
	            this.state = 104;
	            this.match(NomParser.RPAREN);
	            break;

	        case 4:
	            localctx = new SubExpCurlyContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 106;
	            localctx.beg = this.match(NomParser.T__0);
	            this.state = 107;
	            localctx.sec = this.match(NomParser.T__1);
	            this.state = 108;
	            this.expression(0);
	            this.state = 109;
	            localctx.end = this.match(NomParser.T__2);
	            break;

	        case 5:
	            localctx = new AtomExprContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 111;
	            this.atom();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 125;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,3,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 123;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new BinOpContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, NomParser.RULE_expression);
	                    this.state = 114;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 115;
	                    localctx.op = this.match(NomParser.POW);
	                    this.state = 116;
	                    this.expression(7);
	                    break;

	                case 2:
	                    localctx = new BinOpContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, NomParser.RULE_expression);
	                    this.state = 117;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 118;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===NomParser.TIMES || _la===NomParser.DIV)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 119;
	                    this.expression(6);
	                    break;

	                case 3:
	                    localctx = new BinOpContext(this, new ExpressionContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, NomParser.RULE_expression);
	                    this.state = 120;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 121;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===NomParser.PLUS || _la===NomParser.MINUS)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 122;
	                    this.expression(5);
	                    break;

	                } 
	            }
	            this.state = 127;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,3,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	atom() {
	    let localctx = new AtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, NomParser.RULE_atom);
	    try {
	        this.state = 130;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case NomParser.SCIENTIFIC_NUMBER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 128;
	            this.scientific();
	            break;
	        case NomParser.T__3:
	        case NomParser.IDENT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 129;
	            this.ident();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	scientific() {
	    let localctx = new ScientificContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, NomParser.RULE_scientific);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 132;
	        this.match(NomParser.SCIENTIFIC_NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ident() {
	    let localctx = new IdentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, NomParser.RULE_ident);
	    try {
	        this.state = 137;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case NomParser.IDENT:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 134;
	            this.match(NomParser.IDENT);
	            break;
	        case NomParser.T__3:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 135;
	            this.match(NomParser.T__3);
	            this.state = 136;
	            this.match(NomParser.IDENT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	idList() {
	    let localctx = new IdListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, NomParser.RULE_idList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 139;
	        this.match(NomParser.LPAREN);
	        this.state = 143;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===NomParser.T__3 || _la===NomParser.IDENT) {
	            this.state = 140;
	            localctx._ident = this.ident();
	            localctx.identList.push(localctx._ident);
	            this.state = 145;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 146;
	        this.match(NomParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vector3() {
	    let localctx = new Vector3Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, NomParser.RULE_vector3);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 148;
	        this.match(NomParser.LPAREN);
	        this.state = 149;
	        this.expression(0);
	        this.state = 150;
	        this.expression(0);
	        this.state = 151;
	        this.expression(0);
	        this.state = 152;
	        this.match(NomParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argClosed() {
	    let localctx = new ArgClosedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, NomParser.RULE_argClosed);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 154;
	        this.match(NomParser.T__4);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argSdFlag() {
	    let localctx = new ArgSdFlagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, NomParser.RULE_argSdFlag);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 156;
	        this.match(NomParser.T__5);
	        this.state = 157;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argSdLevel() {
	    let localctx = new ArgSdLevelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, NomParser.RULE_argSdLevel);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 159;
	        this.match(NomParser.T__6);
	        this.state = 160;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argOffsetFlag() {
	    let localctx = new ArgOffsetFlagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, NomParser.RULE_argOffsetFlag);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 162;
	        this.match(NomParser.T__7);
	        this.state = 163;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argHeight() {
	    let localctx = new ArgHeightContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, NomParser.RULE_argHeight);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 165;
	        this.match(NomParser.T__8);
	        this.state = 166;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argWidth() {
	    let localctx = new ArgWidthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, NomParser.RULE_argWidth);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 168;
	        this.match(NomParser.T__9);
	        this.state = 169;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argHidden() {
	    let localctx = new ArgHiddenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, NomParser.RULE_argHidden);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 171;
	        this.match(NomParser.T__10);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argBeginCap() {
	    let localctx = new ArgBeginCapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, NomParser.RULE_argBeginCap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 173;
	        this.match(NomParser.T__11);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argEndCap() {
	    let localctx = new ArgEndCapContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, NomParser.RULE_argEndCap);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 175;
	        this.match(NomParser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argSurface() {
	    let localctx = new ArgSurfaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, NomParser.RULE_argSurface);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 177;
	        this.match(NomParser.T__13);
	        this.state = 178;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argCross() {
	    let localctx = new ArgCrossContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, NomParser.RULE_argCross);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 180;
	        this.match(NomParser.T__14);
	        this.state = 181;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argSegs() {
	    let localctx = new ArgSegsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, NomParser.RULE_argSegs);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 183;
	        this.match(NomParser.T__15);
	        this.state = 184;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argOrder() {
	    let localctx = new ArgOrderContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, NomParser.RULE_argOrder);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 186;
	        this.match(NomParser.T__16);
	        this.state = 187;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argLightType() {
	    let localctx = new ArgLightTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, NomParser.RULE_argLightType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 189;
	        this.match(NomParser.T__17);
	        this.state = 190;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argLightColor() {
	    let localctx = new ArgLightColorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, NomParser.RULE_argLightColor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 192;
	        this.match(NomParser.T__18);
	        this.state = 193;
	        this.vector3();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argCameraProjection() {
	    let localctx = new ArgCameraProjectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, NomParser.RULE_argCameraProjection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 195;
	        this.match(NomParser.T__19);
	        this.state = 196;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argCameraID() {
	    let localctx = new ArgCameraIDContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, NomParser.RULE_argCameraID);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 198;
	        this.match(NomParser.T__20);
	        this.state = 199;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argCameraFrustum() {
	    let localctx = new ArgCameraFrustumContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, NomParser.RULE_argCameraFrustum);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 201;
	        this.match(NomParser.T__21);
	        this.state = 202;
	        this.match(NomParser.LPAREN);
	        this.state = 206;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===NomParser.T__0 || _la===NomParser.T__3 || ((((_la - 130)) & ~0x1f) == 0 && ((1 << (_la - 130)) & ((1 << (NomParser.IDENT - 130)) | (1 << (NomParser.SCIENTIFIC_NUMBER - 130)) | (1 << (NomParser.LPAREN - 130)) | (1 << (NomParser.PLUS - 130)) | (1 << (NomParser.MINUS - 130)))) !== 0)) {
	            this.state = 203;
	            this.expression(0);
	            this.state = 208;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 209;
	        this.match(NomParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argTransform() {
	    let localctx = new ArgTransformContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, NomParser.RULE_argTransform);
	    try {
	        this.state = 235;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case NomParser.T__22:
	            localctx = new ArgTransformTwoContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 211;
	            this.match(NomParser.T__22);
	            this.state = 212;
	            this.match(NomParser.LPAREN);
	            this.state = 213;
	            localctx.exp1 = this.expression(0);
	            this.state = 214;
	            localctx.exp2 = this.expression(0);
	            this.state = 215;
	            localctx.exp3 = this.expression(0);
	            this.state = 216;
	            this.match(NomParser.RPAREN);
	            this.state = 217;
	            this.match(NomParser.LPAREN);
	            this.state = 218;
	            localctx.exp4 = this.expression(0);
	            this.state = 219;
	            this.match(NomParser.RPAREN);
	            break;
	        case NomParser.T__23:
	            localctx = new ArgTransformOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 221;
	            this.match(NomParser.T__23);
	            this.state = 222;
	            this.match(NomParser.LPAREN);
	            this.state = 223;
	            this.expression(0);
	            this.state = 224;
	            this.expression(0);
	            this.state = 225;
	            this.expression(0);
	            this.state = 226;
	            this.match(NomParser.RPAREN);
	            break;
	        case NomParser.T__24:
	            localctx = new ArgTransformOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 228;
	            this.match(NomParser.T__24);
	            this.state = 229;
	            this.match(NomParser.LPAREN);
	            this.state = 230;
	            this.expression(0);
	            this.state = 231;
	            this.expression(0);
	            this.state = 232;
	            this.expression(0);
	            this.state = 233;
	            this.match(NomParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argRotate() {
	    let localctx = new ArgRotateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, NomParser.RULE_argRotate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 237;
	        this.match(NomParser.T__25);
	        this.state = 238;
	        this.match(NomParser.LPAREN);
	        this.state = 239;
	        localctx.exp1 = this.expression(0);
	        this.state = 240;
	        localctx.exp2 = this.expression(0);
	        this.state = 241;
	        localctx.exp3 = this.expression(0);
	        this.state = 242;
	        this.match(NomParser.RPAREN);
	        this.state = 243;
	        this.match(NomParser.LPAREN);
	        this.state = 244;
	        localctx.exp4 = this.expression(0);
	        this.state = 245;
	        this.match(NomParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argTranslate() {
	    let localctx = new ArgTranslateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, NomParser.RULE_argTranslate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 247;
	        this.match(NomParser.T__26);
	        this.state = 248;
	        this.match(NomParser.LPAREN);
	        this.state = 249;
	        this.expression(0);
	        this.state = 250;
	        this.expression(0);
	        this.state = 251;
	        this.expression(0);
	        this.state = 252;
	        this.match(NomParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argColor() {
	    let localctx = new ArgColorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, NomParser.RULE_argColor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 254;
	        this.match(NomParser.T__18);
	        this.state = 255;
	        this.match(NomParser.LPAREN);
	        this.state = 256;
	        this.expression(0);
	        this.state = 257;
	        this.expression(0);
	        this.state = 258;
	        this.expression(0);
	        this.state = 259;
	        this.match(NomParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argControlRotate() {
	    let localctx = new ArgControlRotateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, NomParser.RULE_argControlRotate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 261;
	        this.match(NomParser.T__22);
	        this.state = 262;
	        this.vector3();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argControlScale() {
	    let localctx = new ArgControlScaleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, NomParser.RULE_argControlScale);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 264;
	        this.match(NomParser.T__23);
	        this.state = 265;
	        this.vector3();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argPoint() {
	    let localctx = new ArgPointContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, NomParser.RULE_argPoint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 267;
	        this.match(NomParser.T__27);
	        this.state = 268;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argAzimuth() {
	    let localctx = new ArgAzimuthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, NomParser.RULE_argAzimuth);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 270;
	        this.match(NomParser.T__28);
	        this.state = 271;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argTwist() {
	    let localctx = new ArgTwistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, NomParser.RULE_argTwist);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 273;
	        this.match(NomParser.T__29);
	        this.state = 274;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argReverse() {
	    let localctx = new ArgReverseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, NomParser.RULE_argReverse);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 276;
	        this.match(NomParser.T__30);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argMintorsion() {
	    let localctx = new ArgMintorsionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, NomParser.RULE_argMintorsion);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 278;
	        this.match(NomParser.T__31);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argFunc() {
	    let localctx = new ArgFuncContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, NomParser.RULE_argFunc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 280;
	        this.match(NomParser.T__32);
	        this.state = 281;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argFuncX() {
	    let localctx = new ArgFuncXContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, NomParser.RULE_argFuncX);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 283;
	        this.match(NomParser.T__33);
	        this.state = 284;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argFuncY() {
	    let localctx = new ArgFuncYContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, NomParser.RULE_argFuncY);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 286;
	        this.match(NomParser.T__34);
	        this.state = 287;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argFuncZ() {
	    let localctx = new ArgFuncZContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, NomParser.RULE_argFuncZ);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 289;
	        this.match(NomParser.T__35);
	        this.state = 290;
	        this.ident();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	command() {
	    let localctx = new CommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, NomParser.RULE_command);
	    var _la = 0; // Token type
	    try {
	        this.state = 774;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case NomParser.T__27:
	            localctx = new CmdExprListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 292;
	            localctx.open = this.match(NomParser.T__27);
	            this.state = 293;
	            localctx.name = this.ident();
	            this.state = 294;
	            this.match(NomParser.LPAREN);
	            this.state = 295;
	            this.expression(0);
	            this.state = 296;
	            this.expression(0);
	            this.state = 297;
	            this.expression(0);
	            this.state = 298;
	            this.match(NomParser.RPAREN);
	            this.state = 299;
	            localctx.end = this.match(NomParser.T__36);
	            break;
	        case NomParser.T__37:
	            localctx = new CmdIdListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 301;
	            localctx.open = this.match(NomParser.T__37);
	            this.state = 302;
	            localctx.name = this.ident();
	            this.state = 303;
	            this.idList();
	            this.state = 307;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__4) {
	                this.state = 304;
	                this.argClosed();
	                this.state = 309;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 310;
	            localctx.end = this.match(NomParser.T__38);
	            break;
	        case NomParser.T__39:
	            localctx = new CmdSweepContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 312;
	            localctx.open = this.match(NomParser.T__39);
	            this.state = 313;
	            localctx.name = this.ident();
	            this.state = 314;
	            this.match(NomParser.T__40);
	            this.state = 315;
	            localctx.crossId = this.ident();
	            this.state = 321;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << NomParser.T__11) | (1 << NomParser.T__12) | (1 << NomParser.T__30))) !== 0)) {
	                this.state = 319;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case NomParser.T__11:
	                    this.state = 316;
	                    this.argBeginCap();
	                    break;
	                case NomParser.T__12:
	                    this.state = 317;
	                    this.argEndCap();
	                    break;
	                case NomParser.T__30:
	                    this.state = 318;
	                    this.argReverse();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 323;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 324;
	            this.match(NomParser.T__41);
	            this.state = 325;
	            this.match(NomParser.T__42);
	            this.state = 326;
	            localctx.pathId = this.ident();
	            this.state = 332;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(((((_la - 29)) & ~0x1f) == 0 && ((1 << (_la - 29)) & ((1 << (NomParser.T__28 - 29)) | (1 << (NomParser.T__29 - 29)) | (1 << (NomParser.T__31 - 29)))) !== 0)) {
	                this.state = 330;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case NomParser.T__28:
	                    this.state = 327;
	                    this.argAzimuth();
	                    break;
	                case NomParser.T__29:
	                    this.state = 328;
	                    this.argTwist();
	                    break;
	                case NomParser.T__31:
	                    this.state = 329;
	                    this.argMintorsion();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 334;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 335;
	            this.match(NomParser.T__43);
	            this.state = 336;
	            localctx.end = this.match(NomParser.T__44);
	            break;
	        case NomParser.T__45:
	            localctx = new CmdNamedArgsContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 338;
	            localctx.open = this.match(NomParser.T__45);
	            this.state = 339;
	            localctx.name = this.ident();
	            this.state = 340;
	            this.argPoint();
	            this.state = 341;
	            this.argControlScale();
	            this.state = 342;
	            this.argControlRotate();
	            this.state = 347;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__14 || _la===NomParser.T__30) {
	                this.state = 345;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case NomParser.T__14:
	                    this.state = 343;
	                    this.argCross();
	                    break;
	                case NomParser.T__30:
	                    this.state = 344;
	                    this.argReverse();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 349;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 350;
	            localctx.end = this.match(NomParser.T__46);
	            break;
	        case NomParser.T__47:
	            localctx = new CmdIdListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 352;
	            localctx.open = this.match(NomParser.T__47);
	            this.state = 353;
	            localctx.name = this.ident();
	            this.state = 354;
	            this.idList();
	            this.state = 358;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__13) {
	                this.state = 355;
	                this.argSurface();
	                this.state = 360;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 361;
	            localctx.end = this.match(NomParser.T__48);
	            break;
	        case NomParser.T__49:
	            localctx = new CmdIdListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 363;
	            localctx.open = this.match(NomParser.T__49);
	            this.state = 364;
	            localctx.name = this.ident();
	            this.state = 365;
	            this.idList();
	            this.state = 366;
	            localctx.end = this.match(NomParser.T__50);
	            break;
	        case NomParser.T__51:
	            localctx = new CmdSubCmdsContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 368;
	            localctx.open = this.match(NomParser.T__51);
	            this.state = 369;
	            localctx.name = this.ident();
	            this.state = 373;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__13 || _la===NomParser.T__27 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (NomParser.T__37 - 38)) | (1 << (NomParser.T__39 - 38)) | (1 << (NomParser.T__45 - 38)) | (1 << (NomParser.T__47 - 38)) | (1 << (NomParser.T__49 - 38)) | (1 << (NomParser.T__51 - 38)) | (1 << (NomParser.T__53 - 38)) | (1 << (NomParser.T__55 - 38)) | (1 << (NomParser.T__57 - 38)) | (1 << (NomParser.T__59 - 38)) | (1 << (NomParser.T__61 - 38)) | (1 << (NomParser.T__63 - 38)) | (1 << (NomParser.T__65 - 38)) | (1 << (NomParser.T__67 - 38)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (NomParser.T__69 - 70)) | (1 << (NomParser.T__71 - 70)) | (1 << (NomParser.T__73 - 70)) | (1 << (NomParser.T__75 - 70)) | (1 << (NomParser.T__77 - 70)) | (1 << (NomParser.T__79 - 70)) | (1 << (NomParser.T__81 - 70)) | (1 << (NomParser.T__83 - 70)) | (1 << (NomParser.T__85 - 70)) | (1 << (NomParser.T__87 - 70)) | (1 << (NomParser.T__89 - 70)) | (1 << (NomParser.T__91 - 70)) | (1 << (NomParser.T__94 - 70)) | (1 << (NomParser.T__96 - 70)) | (1 << (NomParser.T__98 - 70)) | (1 << (NomParser.T__100 - 70)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (NomParser.T__102 - 103)) | (1 << (NomParser.T__104 - 103)) | (1 << (NomParser.T__106 - 103)) | (1 << (NomParser.T__108 - 103)) | (1 << (NomParser.T__110 - 103)) | (1 << (NomParser.T__112 - 103)) | (1 << (NomParser.T__114 - 103)) | (1 << (NomParser.T__116 - 103)) | (1 << (NomParser.T__118 - 103)) | (1 << (NomParser.T__120 - 103)) | (1 << (NomParser.T__122 - 103)) | (1 << (NomParser.T__124 - 103)) | (1 << (NomParser.T__126 - 103)))) !== 0)) {
	                this.state = 370;
	                this.command();
	                this.state = 375;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 376;
	            localctx.end = this.match(NomParser.T__52);
	            break;
	        case NomParser.T__53:
	            localctx = new CmdSubCmdsContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 378;
	            localctx.open = this.match(NomParser.T__53);
	            this.state = 379;
	            localctx.name = this.ident();
	            this.state = 383;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__13 || _la===NomParser.T__27 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (NomParser.T__37 - 38)) | (1 << (NomParser.T__39 - 38)) | (1 << (NomParser.T__45 - 38)) | (1 << (NomParser.T__47 - 38)) | (1 << (NomParser.T__49 - 38)) | (1 << (NomParser.T__51 - 38)) | (1 << (NomParser.T__53 - 38)) | (1 << (NomParser.T__55 - 38)) | (1 << (NomParser.T__57 - 38)) | (1 << (NomParser.T__59 - 38)) | (1 << (NomParser.T__61 - 38)) | (1 << (NomParser.T__63 - 38)) | (1 << (NomParser.T__65 - 38)) | (1 << (NomParser.T__67 - 38)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (NomParser.T__69 - 70)) | (1 << (NomParser.T__71 - 70)) | (1 << (NomParser.T__73 - 70)) | (1 << (NomParser.T__75 - 70)) | (1 << (NomParser.T__77 - 70)) | (1 << (NomParser.T__79 - 70)) | (1 << (NomParser.T__81 - 70)) | (1 << (NomParser.T__83 - 70)) | (1 << (NomParser.T__85 - 70)) | (1 << (NomParser.T__87 - 70)) | (1 << (NomParser.T__89 - 70)) | (1 << (NomParser.T__91 - 70)) | (1 << (NomParser.T__94 - 70)) | (1 << (NomParser.T__96 - 70)) | (1 << (NomParser.T__98 - 70)) | (1 << (NomParser.T__100 - 70)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (NomParser.T__102 - 103)) | (1 << (NomParser.T__104 - 103)) | (1 << (NomParser.T__106 - 103)) | (1 << (NomParser.T__108 - 103)) | (1 << (NomParser.T__110 - 103)) | (1 << (NomParser.T__112 - 103)) | (1 << (NomParser.T__114 - 103)) | (1 << (NomParser.T__116 - 103)) | (1 << (NomParser.T__118 - 103)) | (1 << (NomParser.T__120 - 103)) | (1 << (NomParser.T__122 - 103)) | (1 << (NomParser.T__124 - 103)) | (1 << (NomParser.T__126 - 103)))) !== 0)) {
	                this.state = 380;
	                this.command();
	                this.state = 385;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 386;
	            localctx.end = this.match(NomParser.T__54);
	            break;
	        case NomParser.T__55:
	            localctx = new CmdExprListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 388;
	            localctx.open = this.match(NomParser.T__55);
	            this.state = 389;
	            localctx.name = this.ident();
	            this.state = 390;
	            this.match(NomParser.LPAREN);
	            this.state = 391;
	            this.expression(0);
	            this.state = 392;
	            this.expression(0);
	            this.state = 393;
	            this.match(NomParser.RPAREN);
	            this.state = 394;
	            localctx.end = this.match(NomParser.T__56);
	            break;
	        case NomParser.T__57:
	            localctx = new CmdExprListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 396;
	            localctx.open = this.match(NomParser.T__57);
	            this.state = 397;
	            localctx.name = this.ident();
	            this.state = 398;
	            this.match(NomParser.LPAREN);
	            this.state = 399;
	            this.expression(0);
	            this.state = 400;
	            this.expression(0);
	            this.state = 401;
	            this.expression(0);
	            this.state = 402;
	            this.match(NomParser.RPAREN);
	            this.state = 403;
	            localctx.end = this.match(NomParser.T__58);
	            break;
	        case NomParser.T__59:
	            localctx = new CmdExprListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 405;
	            localctx.open = this.match(NomParser.T__59);
	            this.state = 406;
	            localctx.name = this.ident();
	            this.state = 407;
	            this.match(NomParser.LPAREN);
	            this.state = 408;
	            this.expression(0);
	            this.state = 409;
	            this.expression(0);
	            this.state = 410;
	            this.expression(0);
	            this.state = 411;
	            this.expression(0);
	            this.state = 412;
	            this.expression(0);
	            this.state = 413;
	            this.expression(0);
	            this.state = 414;
	            this.match(NomParser.RPAREN);
	            this.state = 415;
	            localctx.end = this.match(NomParser.T__60);
	            break;
	        case NomParser.T__61:
	            localctx = new CmdExprListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 417;
	            localctx.open = this.match(NomParser.T__61);
	            this.state = 418;
	            localctx.name = this.ident();
	            this.state = 419;
	            this.match(NomParser.LPAREN);
	            this.state = 420;
	            this.expression(0);
	            this.state = 421;
	            this.expression(0);
	            this.state = 422;
	            this.expression(0);
	            this.state = 423;
	            this.expression(0);
	            this.state = 424;
	            this.expression(0);
	            this.state = 425;
	            this.expression(0);
	            this.state = 426;
	            this.expression(0);
	            this.state = 427;
	            this.match(NomParser.RPAREN);
	            this.state = 428;
	            localctx.end = this.match(NomParser.T__62);
	            break;
	        case NomParser.T__63:
	            localctx = new CmdExprListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 430;
	            localctx.open = this.match(NomParser.T__63);
	            this.state = 431;
	            localctx.name = this.ident();
	            this.state = 432;
	            this.match(NomParser.LPAREN);
	            this.state = 433;
	            this.expression(0);
	            this.state = 434;
	            this.expression(0);
	            this.state = 435;
	            this.expression(0);
	            this.state = 436;
	            this.expression(0);
	            this.state = 437;
	            this.match(NomParser.RPAREN);
	            this.state = 438;
	            localctx.end = this.match(NomParser.T__64);
	            break;
	        case NomParser.T__65:
	            localctx = new CmdExprListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 440;
	            localctx.open = this.match(NomParser.T__65);
	            this.state = 441;
	            localctx.name = this.ident();
	            this.state = 442;
	            this.match(NomParser.LPAREN);
	            this.state = 443;
	            this.expression(0);
	            this.state = 444;
	            this.expression(0);
	            this.state = 445;
	            this.expression(0);
	            this.state = 446;
	            this.expression(0);
	            this.state = 447;
	            this.expression(0);
	            this.state = 448;
	            this.expression(0);
	            this.state = 449;
	            this.match(NomParser.RPAREN);
	            this.state = 450;
	            localctx.end = this.match(NomParser.T__66);
	            break;
	        case NomParser.T__67:
	            localctx = new CmdExprListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 452;
	            localctx.open = this.match(NomParser.T__67);
	            this.state = 453;
	            localctx.name = this.ident();
	            this.state = 454;
	            this.match(NomParser.LPAREN);
	            this.state = 455;
	            this.expression(0);
	            this.state = 456;
	            this.expression(0);
	            this.state = 457;
	            this.expression(0);
	            this.state = 458;
	            this.expression(0);
	            this.state = 459;
	            this.expression(0);
	            this.state = 460;
	            this.expression(0);
	            this.state = 461;
	            this.expression(0);
	            this.state = 462;
	            this.match(NomParser.RPAREN);
	            this.state = 463;
	            localctx.end = this.match(NomParser.T__68);
	            break;
	        case NomParser.T__69:
	            localctx = new CmdExprListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 465;
	            localctx.open = this.match(NomParser.T__69);
	            this.state = 466;
	            localctx.name = this.ident();
	            this.state = 467;
	            this.match(NomParser.LPAREN);
	            this.state = 468;
	            this.expression(0);
	            this.state = 469;
	            this.expression(0);
	            this.state = 470;
	            this.expression(0);
	            this.state = 471;
	            this.expression(0);
	            this.state = 472;
	            this.match(NomParser.RPAREN);
	            this.state = 473;
	            localctx.end = this.match(NomParser.T__70);
	            break;
	        case NomParser.T__71:
	            localctx = new CmdExprListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 475;
	            localctx.open = this.match(NomParser.T__71);
	            this.state = 476;
	            localctx.name = this.ident();
	            this.state = 477;
	            this.match(NomParser.LPAREN);
	            this.state = 478;
	            this.expression(0);
	            this.state = 479;
	            this.expression(0);
	            this.state = 480;
	            this.expression(0);
	            this.state = 481;
	            this.expression(0);
	            this.state = 482;
	            this.match(NomParser.RPAREN);
	            this.state = 483;
	            localctx.end = this.match(NomParser.T__72);
	            break;
	        case NomParser.T__73:
	            localctx = new CmdExprListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 485;
	            localctx.open = this.match(NomParser.T__73);
	            this.state = 486;
	            localctx.name = this.ident();
	            this.state = 487;
	            this.match(NomParser.LPAREN);
	            this.state = 488;
	            this.expression(0);
	            this.state = 489;
	            this.expression(0);
	            this.state = 490;
	            this.expression(0);
	            this.state = 491;
	            this.expression(0);
	            this.state = 492;
	            this.match(NomParser.RPAREN);
	            this.state = 493;
	            localctx.end = this.match(NomParser.T__74);
	            break;
	        case NomParser.T__75:
	            localctx = new CmdExprListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 495;
	            localctx.open = this.match(NomParser.T__75);
	            this.state = 496;
	            localctx.name = this.ident();
	            this.state = 497;
	            this.match(NomParser.LPAREN);
	            this.state = 498;
	            this.expression(0);
	            this.state = 499;
	            this.expression(0);
	            this.state = 500;
	            this.expression(0);
	            this.state = 501;
	            this.expression(0);
	            this.state = 502;
	            this.match(NomParser.RPAREN);
	            this.state = 503;
	            localctx.end = this.match(NomParser.T__76);
	            break;
	        case NomParser.T__77:
	            localctx = new CmdExprListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 505;
	            localctx.open = this.match(NomParser.T__77);
	            this.state = 506;
	            localctx.name = this.ident();
	            this.state = 507;
	            this.match(NomParser.LPAREN);
	            this.state = 508;
	            this.expression(0);
	            this.state = 509;
	            this.expression(0);
	            this.state = 510;
	            this.expression(0);
	            this.state = 511;
	            this.expression(0);
	            this.state = 512;
	            this.expression(0);
	            this.state = 513;
	            this.expression(0);
	            this.state = 514;
	            this.expression(0);
	            this.state = 515;
	            this.match(NomParser.RPAREN);
	            this.state = 516;
	            localctx.end = this.match(NomParser.T__78);
	            break;
	        case NomParser.T__79:
	            localctx = new CmdExprListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 518;
	            localctx.open = this.match(NomParser.T__79);
	            this.state = 519;
	            localctx.name = this.ident();
	            this.state = 520;
	            this.match(NomParser.LPAREN);
	            this.state = 521;
	            this.expression(0);
	            this.state = 522;
	            this.expression(0);
	            this.state = 523;
	            this.expression(0);
	            this.state = 524;
	            this.expression(0);
	            this.state = 525;
	            this.expression(0);
	            this.state = 526;
	            this.expression(0);
	            this.state = 527;
	            this.expression(0);
	            this.state = 528;
	            this.match(NomParser.RPAREN);
	            this.state = 529;
	            localctx.end = this.match(NomParser.T__80);
	            break;
	        case NomParser.T__81:
	            localctx = new CmdGeneralContext(this, localctx);
	            this.enterOuterAlt(localctx, 22);
	            this.state = 531;
	            localctx.open = this.match(NomParser.T__81);
	            this.state = 532;
	            localctx.name = this.ident();
	            this.state = 533;
	            this.argFunc();
	            this.state = 534;
	            this.match(NomParser.LPAREN);
	            this.state = 535;
	            this.expression(0);
	            this.state = 536;
	            this.expression(0);
	            this.state = 537;
	            this.expression(0);
	            this.state = 538;
	            this.expression(0);
	            this.state = 539;
	            this.expression(0);
	            this.state = 540;
	            this.expression(0);
	            this.state = 541;
	            this.match(NomParser.RPAREN);
	            this.state = 542;
	            localctx.end = this.match(NomParser.T__82);
	            break;
	        case NomParser.T__83:
	            localctx = new CmdGeneralParametricContext(this, localctx);
	            this.enterOuterAlt(localctx, 23);
	            this.state = 544;
	            localctx.open = this.match(NomParser.T__83);
	            this.state = 545;
	            localctx.name = this.ident();
	            this.state = 546;
	            this.argFuncX();
	            this.state = 547;
	            this.argFuncY();
	            this.state = 548;
	            this.argFuncZ();
	            this.state = 549;
	            this.match(NomParser.LPAREN);
	            this.state = 550;
	            this.expression(0);
	            this.state = 551;
	            this.expression(0);
	            this.state = 552;
	            this.expression(0);
	            this.state = 553;
	            this.expression(0);
	            this.state = 554;
	            this.expression(0);
	            this.state = 555;
	            this.expression(0);
	            this.state = 556;
	            this.match(NomParser.RPAREN);
	            this.state = 557;
	            localctx.end = this.match(NomParser.T__84);
	            break;
	        case NomParser.T__85:
	            localctx = new CmdGeneralContext(this, localctx);
	            this.enterOuterAlt(localctx, 24);
	            this.state = 559;
	            localctx.open = this.match(NomParser.T__85);
	            this.state = 560;
	            localctx.name = this.ident();
	            this.state = 561;
	            this.argFunc();
	            this.state = 562;
	            this.match(NomParser.LPAREN);
	            this.state = 563;
	            this.expression(0);
	            this.state = 564;
	            this.expression(0);
	            this.state = 565;
	            this.expression(0);
	            this.state = 566;
	            this.expression(0);
	            this.state = 567;
	            this.expression(0);
	            this.state = 568;
	            this.expression(0);
	            this.state = 569;
	            this.expression(0);
	            this.state = 570;
	            this.expression(0);
	            this.state = 571;
	            this.expression(0);
	            this.state = 572;
	            this.match(NomParser.RPAREN);
	            this.state = 573;
	            localctx.end = this.match(NomParser.T__86);
	            break;
	        case NomParser.T__87:
	            localctx = new CmdIdListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 25);
	            this.state = 575;
	            localctx.open = this.match(NomParser.T__87);
	            this.state = 576;
	            localctx.name = this.ident();
	            this.state = 577;
	            this.idList();
	            this.state = 581;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__15) {
	                this.state = 578;
	                this.argSegs();
	                this.state = 583;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 584;
	            localctx.end = this.match(NomParser.T__88);
	            break;
	        case NomParser.T__89:
	            localctx = new CmdIdListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 26);
	            this.state = 586;
	            localctx.open = this.match(NomParser.T__89);
	            this.state = 587;
	            localctx.name = this.ident();
	            this.state = 591;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__16) {
	                this.state = 588;
	                this.argOrder();
	                this.state = 593;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 594;
	            this.idList();
	            this.state = 598;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__15) {
	                this.state = 595;
	                this.argSegs();
	                this.state = 600;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 601;
	            localctx.end = this.match(NomParser.T__90);
	            break;
	        case NomParser.T__91:
	            localctx = new CmdInstanceContext(this, localctx);
	            this.enterOuterAlt(localctx, 27);
	            this.state = 603;
	            localctx.open = this.match(NomParser.T__91);
	            this.state = 604;
	            localctx.name = this.ident();
	            this.state = 605;
	            localctx.entity = this.ident();
	            this.state = 611;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << NomParser.T__10) | (1 << NomParser.T__13) | (1 << NomParser.T__22) | (1 << NomParser.T__23) | (1 << NomParser.T__24))) !== 0)) {
	                this.state = 609;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case NomParser.T__13:
	                    this.state = 606;
	                    this.argSurface();
	                    break;
	                case NomParser.T__22:
	                case NomParser.T__23:
	                case NomParser.T__24:
	                    this.state = 607;
	                    this.argTransform();
	                    break;
	                case NomParser.T__10:
	                    this.state = 608;
	                    this.argHidden();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 613;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 614;
	            localctx.end = this.match(NomParser.T__92);
	            break;
	        case NomParser.T__13:
	            localctx = new CmdSurfaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 28);
	            this.state = 616;
	            localctx.open = this.match(NomParser.T__13);
	            this.state = 617;
	            localctx.name = this.ident();
	            this.state = 618;
	            this.argColor();
	            this.state = 619;
	            localctx.end = this.match(NomParser.T__93);
	            break;
	        case NomParser.T__94:
	            localctx = new CmdExprListOneContext(this, localctx);
	            this.enterOuterAlt(localctx, 29);
	            this.state = 621;
	            localctx.open = this.match(NomParser.T__94);
	            this.state = 622;
	            localctx.name = this.ident();
	            this.state = 623;
	            this.match(NomParser.LPAREN);
	            this.state = 624;
	            this.expression(0);
	            this.state = 625;
	            this.expression(0);
	            this.state = 626;
	            this.expression(0);
	            this.state = 627;
	            this.match(NomParser.RPAREN);
	            this.state = 628;
	            localctx.end = this.match(NomParser.T__95);
	            break;
	        case NomParser.T__96:
	            localctx = new CmdArgSurfaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 30);
	            this.state = 630;
	            localctx.open = this.match(NomParser.T__96);
	            this.state = 631;
	            this.argSurface();
	            this.state = 632;
	            localctx.end = this.match(NomParser.T__97);
	            break;
	        case NomParser.T__98:
	            localctx = new CmdArgSurfaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 31);
	            this.state = 634;
	            localctx.open = this.match(NomParser.T__98);
	            this.state = 635;
	            this.argSurface();
	            this.state = 636;
	            localctx.end = this.match(NomParser.T__99);
	            break;
	        case NomParser.T__100:
	            localctx = new CmdArgSurfaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 32);
	            this.state = 638;
	            localctx.open = this.match(NomParser.T__100);
	            this.state = 639;
	            this.argSurface();
	            this.state = 640;
	            localctx.end = this.match(NomParser.T__101);
	            break;
	        case NomParser.T__102:
	            localctx = new CmdArgSurfaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 33);
	            this.state = 642;
	            localctx.open = this.match(NomParser.T__102);
	            this.state = 643;
	            this.argSurface();
	            this.state = 644;
	            localctx.end = this.match(NomParser.T__103);
	            break;
	        case NomParser.T__104:
	            localctx = new CmdArgSurfaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 34);
	            this.state = 646;
	            localctx.open = this.match(NomParser.T__104);
	            this.state = 647;
	            this.argSurface();
	            this.state = 648;
	            localctx.end = this.match(NomParser.T__105);
	            break;
	        case NomParser.T__106:
	            localctx = new CmdArgSurfaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 35);
	            this.state = 650;
	            localctx.open = this.match(NomParser.T__106);
	            this.state = 651;
	            this.argSurface();
	            this.state = 652;
	            localctx.end = this.match(NomParser.T__107);
	            break;
	        case NomParser.T__108:
	            localctx = new CmdArgSurfaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 36);
	            this.state = 654;
	            localctx.open = this.match(NomParser.T__108);
	            this.state = 655;
	            this.argSurface();
	            this.state = 656;
	            localctx.end = this.match(NomParser.T__109);
	            break;
	        case NomParser.T__110:
	            localctx = new CmdBankContext(this, localctx);
	            this.enterOuterAlt(localctx, 37);
	            this.state = 658;
	            localctx.open = this.match(NomParser.T__110);
	            this.state = 659;
	            localctx.name = this.ident();
	            this.state = 663;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__128) {
	                this.state = 660;
	                this.set();
	                this.state = 665;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 666;
	            localctx.end = this.match(NomParser.T__111);
	            break;
	        case NomParser.T__112:
	            localctx = new CmdDeleteContext(this, localctx);
	            this.enterOuterAlt(localctx, 38);
	            this.state = 668;
	            localctx.open = this.match(NomParser.T__112);
	            this.state = 672;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__47) {
	                this.state = 669;
	                this.deleteFace();
	                this.state = 674;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 675;
	            localctx.end = this.match(NomParser.T__113);
	            break;
	        case NomParser.T__114:
	            localctx = new CmdSubdivisionContext(this, localctx);
	            this.enterOuterAlt(localctx, 39);
	            this.state = 676;
	            localctx.open = this.match(NomParser.T__114);
	            this.state = 677;
	            localctx.name = this.ident();
	            this.state = 681;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__5) {
	                this.state = 678;
	                this.argSdFlag();
	                this.state = 683;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 687;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__6) {
	                this.state = 684;
	                this.argSdLevel();
	                this.state = 689;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 693;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__13 || _la===NomParser.T__27 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (NomParser.T__37 - 38)) | (1 << (NomParser.T__39 - 38)) | (1 << (NomParser.T__45 - 38)) | (1 << (NomParser.T__47 - 38)) | (1 << (NomParser.T__49 - 38)) | (1 << (NomParser.T__51 - 38)) | (1 << (NomParser.T__53 - 38)) | (1 << (NomParser.T__55 - 38)) | (1 << (NomParser.T__57 - 38)) | (1 << (NomParser.T__59 - 38)) | (1 << (NomParser.T__61 - 38)) | (1 << (NomParser.T__63 - 38)) | (1 << (NomParser.T__65 - 38)) | (1 << (NomParser.T__67 - 38)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (NomParser.T__69 - 70)) | (1 << (NomParser.T__71 - 70)) | (1 << (NomParser.T__73 - 70)) | (1 << (NomParser.T__75 - 70)) | (1 << (NomParser.T__77 - 70)) | (1 << (NomParser.T__79 - 70)) | (1 << (NomParser.T__81 - 70)) | (1 << (NomParser.T__83 - 70)) | (1 << (NomParser.T__85 - 70)) | (1 << (NomParser.T__87 - 70)) | (1 << (NomParser.T__89 - 70)) | (1 << (NomParser.T__91 - 70)) | (1 << (NomParser.T__94 - 70)) | (1 << (NomParser.T__96 - 70)) | (1 << (NomParser.T__98 - 70)) | (1 << (NomParser.T__100 - 70)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (NomParser.T__102 - 103)) | (1 << (NomParser.T__104 - 103)) | (1 << (NomParser.T__106 - 103)) | (1 << (NomParser.T__108 - 103)) | (1 << (NomParser.T__110 - 103)) | (1 << (NomParser.T__112 - 103)) | (1 << (NomParser.T__114 - 103)) | (1 << (NomParser.T__116 - 103)) | (1 << (NomParser.T__118 - 103)) | (1 << (NomParser.T__120 - 103)) | (1 << (NomParser.T__122 - 103)) | (1 << (NomParser.T__124 - 103)) | (1 << (NomParser.T__126 - 103)))) !== 0)) {
	                this.state = 690;
	                this.command();
	                this.state = 695;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 696;
	            localctx.end = this.match(NomParser.T__115);
	            break;
	        case NomParser.T__116:
	            localctx = new CmdSharpContext(this, localctx);
	            this.enterOuterAlt(localctx, 40);
	            this.state = 698;
	            localctx.open = this.match(NomParser.T__116);
	            this.state = 699;
	            this.expression(0);
	            this.state = 701; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 700;
	                this.idList();
	                this.state = 703; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===NomParser.LPAREN);
	            this.state = 705;
	            localctx.end = this.match(NomParser.T__117);
	            break;
	        case NomParser.T__118:
	            localctx = new CmdOffsetContext(this, localctx);
	            this.enterOuterAlt(localctx, 41);
	            this.state = 707;
	            localctx.open = this.match(NomParser.T__118);
	            this.state = 708;
	            localctx.name = this.ident();
	            this.state = 712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__7) {
	                this.state = 709;
	                this.argOffsetFlag();
	                this.state = 714;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 718;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__8) {
	                this.state = 715;
	                this.argHeight();
	                this.state = 720;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 724;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__9) {
	                this.state = 721;
	                this.argWidth();
	                this.state = 726;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 730;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__13 || _la===NomParser.T__27 || ((((_la - 38)) & ~0x1f) == 0 && ((1 << (_la - 38)) & ((1 << (NomParser.T__37 - 38)) | (1 << (NomParser.T__39 - 38)) | (1 << (NomParser.T__45 - 38)) | (1 << (NomParser.T__47 - 38)) | (1 << (NomParser.T__49 - 38)) | (1 << (NomParser.T__51 - 38)) | (1 << (NomParser.T__53 - 38)) | (1 << (NomParser.T__55 - 38)) | (1 << (NomParser.T__57 - 38)) | (1 << (NomParser.T__59 - 38)) | (1 << (NomParser.T__61 - 38)) | (1 << (NomParser.T__63 - 38)) | (1 << (NomParser.T__65 - 38)) | (1 << (NomParser.T__67 - 38)))) !== 0) || ((((_la - 70)) & ~0x1f) == 0 && ((1 << (_la - 70)) & ((1 << (NomParser.T__69 - 70)) | (1 << (NomParser.T__71 - 70)) | (1 << (NomParser.T__73 - 70)) | (1 << (NomParser.T__75 - 70)) | (1 << (NomParser.T__77 - 70)) | (1 << (NomParser.T__79 - 70)) | (1 << (NomParser.T__81 - 70)) | (1 << (NomParser.T__83 - 70)) | (1 << (NomParser.T__85 - 70)) | (1 << (NomParser.T__87 - 70)) | (1 << (NomParser.T__89 - 70)) | (1 << (NomParser.T__91 - 70)) | (1 << (NomParser.T__94 - 70)) | (1 << (NomParser.T__96 - 70)) | (1 << (NomParser.T__98 - 70)) | (1 << (NomParser.T__100 - 70)))) !== 0) || ((((_la - 103)) & ~0x1f) == 0 && ((1 << (_la - 103)) & ((1 << (NomParser.T__102 - 103)) | (1 << (NomParser.T__104 - 103)) | (1 << (NomParser.T__106 - 103)) | (1 << (NomParser.T__108 - 103)) | (1 << (NomParser.T__110 - 103)) | (1 << (NomParser.T__112 - 103)) | (1 << (NomParser.T__114 - 103)) | (1 << (NomParser.T__116 - 103)) | (1 << (NomParser.T__118 - 103)) | (1 << (NomParser.T__120 - 103)) | (1 << (NomParser.T__122 - 103)) | (1 << (NomParser.T__124 - 103)) | (1 << (NomParser.T__126 - 103)))) !== 0)) {
	                this.state = 727;
	                this.command();
	                this.state = 732;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 733;
	            localctx.end = this.match(NomParser.T__119);
	            break;
	        case NomParser.T__120:
	            localctx = new CmdIncludeContext(this, localctx);
	            this.enterOuterAlt(localctx, 42);
	            this.state = 735;
	            localctx.open = this.match(NomParser.T__120);
	            this.state = 736;
	            localctx.name = this.ident();
	            this.state = 737;
	            localctx.end = this.match(NomParser.T__121);
	            break;
	        case NomParser.T__122:
	            localctx = new CmdLightContext(this, localctx);
	            this.enterOuterAlt(localctx, 43);
	            this.state = 739;
	            localctx.open = this.match(NomParser.T__122);
	            this.state = 740;
	            localctx.name = this.ident();
	            this.state = 741;
	            this.argLightType();
	            this.state = 742;
	            this.argLightColor();
	            this.state = 743;
	            localctx.end = this.match(NomParser.T__123);
	            break;
	        case NomParser.T__124:
	            localctx = new CmdCameraContext(this, localctx);
	            this.enterOuterAlt(localctx, 44);
	            this.state = 745;
	            localctx.open = this.match(NomParser.T__124);
	            this.state = 746;
	            localctx.name = this.ident();
	            this.state = 747;
	            this.argCameraProjection();
	            this.state = 748;
	            this.argCameraFrustum();
	            this.state = 752;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__26) {
	                this.state = 749;
	                this.argTranslate();
	                this.state = 754;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 758;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===NomParser.T__25) {
	                this.state = 755;
	                this.argRotate();
	                this.state = 760;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 761;
	            localctx.end = this.match(NomParser.T__125);
	            break;
	        case NomParser.T__126:
	            localctx = new CmdViewportContext(this, localctx);
	            this.enterOuterAlt(localctx, 45);
	            this.state = 763;
	            localctx.open = this.match(NomParser.T__126);
	            this.state = 764;
	            localctx.name = this.ident();
	            this.state = 765;
	            this.argCameraID();
	            this.state = 766;
	            this.match(NomParser.LPAREN);
	            this.state = 767;
	            this.expression(0);
	            this.state = 768;
	            this.expression(0);
	            this.state = 769;
	            this.expression(0);
	            this.state = 770;
	            this.expression(0);
	            this.state = 771;
	            this.match(NomParser.RPAREN);
	            this.state = 772;
	            localctx.end = this.match(NomParser.T__127);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	set() {
	    let localctx = new SetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, NomParser.RULE_set);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 776;
	        localctx.open = this.match(NomParser.T__128);
	        this.state = 777;
	        this.ident();
	        this.state = 778;
	        this.expression(0);
	        this.state = 779;
	        this.expression(0);
	        this.state = 780;
	        this.expression(0);
	        this.state = 781;
	        this.expression(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteFace() {
	    let localctx = new DeleteFaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, NomParser.RULE_deleteFace);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 783;
	        localctx.open = this.match(NomParser.T__47);
	        this.state = 784;
	        this.ident();
	        this.state = 785;
	        localctx.end = this.match(NomParser.T__48);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

NomParser.EOF = antlr4.Token.EOF;
NomParser.T__0 = 1;
NomParser.T__1 = 2;
NomParser.T__2 = 3;
NomParser.T__3 = 4;
NomParser.T__4 = 5;
NomParser.T__5 = 6;
NomParser.T__6 = 7;
NomParser.T__7 = 8;
NomParser.T__8 = 9;
NomParser.T__9 = 10;
NomParser.T__10 = 11;
NomParser.T__11 = 12;
NomParser.T__12 = 13;
NomParser.T__13 = 14;
NomParser.T__14 = 15;
NomParser.T__15 = 16;
NomParser.T__16 = 17;
NomParser.T__17 = 18;
NomParser.T__18 = 19;
NomParser.T__19 = 20;
NomParser.T__20 = 21;
NomParser.T__21 = 22;
NomParser.T__22 = 23;
NomParser.T__23 = 24;
NomParser.T__24 = 25;
NomParser.T__25 = 26;
NomParser.T__26 = 27;
NomParser.T__27 = 28;
NomParser.T__28 = 29;
NomParser.T__29 = 30;
NomParser.T__30 = 31;
NomParser.T__31 = 32;
NomParser.T__32 = 33;
NomParser.T__33 = 34;
NomParser.T__34 = 35;
NomParser.T__35 = 36;
NomParser.T__36 = 37;
NomParser.T__37 = 38;
NomParser.T__38 = 39;
NomParser.T__39 = 40;
NomParser.T__40 = 41;
NomParser.T__41 = 42;
NomParser.T__42 = 43;
NomParser.T__43 = 44;
NomParser.T__44 = 45;
NomParser.T__45 = 46;
NomParser.T__46 = 47;
NomParser.T__47 = 48;
NomParser.T__48 = 49;
NomParser.T__49 = 50;
NomParser.T__50 = 51;
NomParser.T__51 = 52;
NomParser.T__52 = 53;
NomParser.T__53 = 54;
NomParser.T__54 = 55;
NomParser.T__55 = 56;
NomParser.T__56 = 57;
NomParser.T__57 = 58;
NomParser.T__58 = 59;
NomParser.T__59 = 60;
NomParser.T__60 = 61;
NomParser.T__61 = 62;
NomParser.T__62 = 63;
NomParser.T__63 = 64;
NomParser.T__64 = 65;
NomParser.T__65 = 66;
NomParser.T__66 = 67;
NomParser.T__67 = 68;
NomParser.T__68 = 69;
NomParser.T__69 = 70;
NomParser.T__70 = 71;
NomParser.T__71 = 72;
NomParser.T__72 = 73;
NomParser.T__73 = 74;
NomParser.T__74 = 75;
NomParser.T__75 = 76;
NomParser.T__76 = 77;
NomParser.T__77 = 78;
NomParser.T__78 = 79;
NomParser.T__79 = 80;
NomParser.T__80 = 81;
NomParser.T__81 = 82;
NomParser.T__82 = 83;
NomParser.T__83 = 84;
NomParser.T__84 = 85;
NomParser.T__85 = 86;
NomParser.T__86 = 87;
NomParser.T__87 = 88;
NomParser.T__88 = 89;
NomParser.T__89 = 90;
NomParser.T__90 = 91;
NomParser.T__91 = 92;
NomParser.T__92 = 93;
NomParser.T__93 = 94;
NomParser.T__94 = 95;
NomParser.T__95 = 96;
NomParser.T__96 = 97;
NomParser.T__97 = 98;
NomParser.T__98 = 99;
NomParser.T__99 = 100;
NomParser.T__100 = 101;
NomParser.T__101 = 102;
NomParser.T__102 = 103;
NomParser.T__103 = 104;
NomParser.T__104 = 105;
NomParser.T__105 = 106;
NomParser.T__106 = 107;
NomParser.T__107 = 108;
NomParser.T__108 = 109;
NomParser.T__109 = 110;
NomParser.T__110 = 111;
NomParser.T__111 = 112;
NomParser.T__112 = 113;
NomParser.T__113 = 114;
NomParser.T__114 = 115;
NomParser.T__115 = 116;
NomParser.T__116 = 117;
NomParser.T__117 = 118;
NomParser.T__118 = 119;
NomParser.T__119 = 120;
NomParser.T__120 = 121;
NomParser.T__121 = 122;
NomParser.T__122 = 123;
NomParser.T__123 = 124;
NomParser.T__124 = 125;
NomParser.T__125 = 126;
NomParser.T__126 = 127;
NomParser.T__127 = 128;
NomParser.T__128 = 129;
NomParser.IDENT = 130;
NomParser.SCIENTIFIC_NUMBER = 131;
NomParser.LPAREN = 132;
NomParser.RPAREN = 133;
NomParser.PLUS = 134;
NomParser.MINUS = 135;
NomParser.TIMES = 136;
NomParser.DIV = 137;
NomParser.GT = 138;
NomParser.LT = 139;
NomParser.EQ = 140;
NomParser.POINT = 141;
NomParser.POW = 142;
NomParser.WS = 143;
NomParser.COMMENT = 144;
NomParser.LINE_COMMENT = 145;

NomParser.RULE_file = 0;
NomParser.RULE_expression = 1;
NomParser.RULE_atom = 2;
NomParser.RULE_scientific = 3;
NomParser.RULE_ident = 4;
NomParser.RULE_idList = 5;
NomParser.RULE_vector3 = 6;
NomParser.RULE_argClosed = 7;
NomParser.RULE_argSdFlag = 8;
NomParser.RULE_argSdLevel = 9;
NomParser.RULE_argOffsetFlag = 10;
NomParser.RULE_argHeight = 11;
NomParser.RULE_argWidth = 12;
NomParser.RULE_argHidden = 13;
NomParser.RULE_argBeginCap = 14;
NomParser.RULE_argEndCap = 15;
NomParser.RULE_argSurface = 16;
NomParser.RULE_argCross = 17;
NomParser.RULE_argSegs = 18;
NomParser.RULE_argOrder = 19;
NomParser.RULE_argLightType = 20;
NomParser.RULE_argLightColor = 21;
NomParser.RULE_argCameraProjection = 22;
NomParser.RULE_argCameraID = 23;
NomParser.RULE_argCameraFrustum = 24;
NomParser.RULE_argTransform = 25;
NomParser.RULE_argRotate = 26;
NomParser.RULE_argTranslate = 27;
NomParser.RULE_argColor = 28;
NomParser.RULE_argControlRotate = 29;
NomParser.RULE_argControlScale = 30;
NomParser.RULE_argPoint = 31;
NomParser.RULE_argAzimuth = 32;
NomParser.RULE_argTwist = 33;
NomParser.RULE_argReverse = 34;
NomParser.RULE_argMintorsion = 35;
NomParser.RULE_argFunc = 36;
NomParser.RULE_argFuncX = 37;
NomParser.RULE_argFuncY = 38;
NomParser.RULE_argFuncZ = 39;
NomParser.RULE_command = 40;
NomParser.RULE_set = 41;
NomParser.RULE_deleteFace = 42;

class FileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_file;
    }

	EOF() {
	    return this.getToken(NomParser.EOF, 0);
	};

	command = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommandContext);
	    } else {
	        return this.getTypedRuleContext(CommandContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterFile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitFile(this);
		}
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_expression;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CallContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	LPAREN() {
	    return this.getToken(NomParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(NomParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCall(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCall(this);
		}
	}


}

NomParser.CallContext = CallContext;

class UnaryOpContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	PLUS() {
	    return this.getToken(NomParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(NomParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterUnaryOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitUnaryOp(this);
		}
	}


}

NomParser.UnaryOpContext = UnaryOpContext;

class SubExpParenContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(NomParser.LPAREN, 0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	RPAREN() {
	    return this.getToken(NomParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterSubExpParen(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitSubExpParen(this);
		}
	}


}

NomParser.SubExpParenContext = SubExpParenContext;

class SubExpCurlyContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.beg = null; // Token;
        this.sec = null; // Token;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterSubExpCurly(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitSubExpCurly(this);
		}
	}


}

NomParser.SubExpCurlyContext = SubExpCurlyContext;

class BinOpContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null; // Token;
        super.copyFrom(ctx);
    }

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	POW() {
	    return this.getToken(NomParser.POW, 0);
	};

	TIMES() {
	    return this.getToken(NomParser.TIMES, 0);
	};

	DIV() {
	    return this.getToken(NomParser.DIV, 0);
	};

	PLUS() {
	    return this.getToken(NomParser.PLUS, 0);
	};

	MINUS() {
	    return this.getToken(NomParser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterBinOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitBinOp(this);
		}
	}


}

NomParser.BinOpContext = BinOpContext;

class AtomExprContext extends ExpressionContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterAtomExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitAtomExpr(this);
		}
	}


}

NomParser.AtomExprContext = AtomExprContext;

class AtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_atom;
    }

	scientific() {
	    return this.getTypedRuleContext(ScientificContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitAtom(this);
		}
	}


}



class ScientificContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_scientific;
    }

	SCIENTIFIC_NUMBER() {
	    return this.getToken(NomParser.SCIENTIFIC_NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterScientific(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitScientific(this);
		}
	}


}



class IdentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_ident;
    }

	IDENT() {
	    return this.getToken(NomParser.IDENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterIdent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitIdent(this);
		}
	}


}



class IdListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_idList;
        this._ident = null; // IdentContext
        this.identList = []; // of IdentContexts
    }

	LPAREN() {
	    return this.getToken(NomParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(NomParser.RPAREN, 0);
	};

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterIdList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitIdList(this);
		}
	}


}



class Vector3Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_vector3;
    }

	LPAREN() {
	    return this.getToken(NomParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(NomParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterVector3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitVector3(this);
		}
	}


}



class ArgClosedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argClosed;
    }


	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgClosed(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgClosed(this);
		}
	}


}



class ArgSdFlagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argSdFlag;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgSdFlag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgSdFlag(this);
		}
	}


}



class ArgSdLevelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argSdLevel;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgSdLevel(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgSdLevel(this);
		}
	}


}



class ArgOffsetFlagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argOffsetFlag;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgOffsetFlag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgOffsetFlag(this);
		}
	}


}



class ArgHeightContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argHeight;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgHeight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgHeight(this);
		}
	}


}



class ArgWidthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argWidth;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgWidth(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgWidth(this);
		}
	}


}



class ArgHiddenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argHidden;
    }


	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgHidden(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgHidden(this);
		}
	}


}



class ArgBeginCapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argBeginCap;
    }


	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgBeginCap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgBeginCap(this);
		}
	}


}



class ArgEndCapContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argEndCap;
    }


	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgEndCap(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgEndCap(this);
		}
	}


}



class ArgSurfaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argSurface;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgSurface(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgSurface(this);
		}
	}


}



class ArgCrossContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argCross;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgCross(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgCross(this);
		}
	}


}



class ArgSegsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argSegs;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgSegs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgSegs(this);
		}
	}


}



class ArgOrderContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argOrder;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgOrder(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgOrder(this);
		}
	}


}



class ArgLightTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argLightType;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgLightType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgLightType(this);
		}
	}


}



class ArgLightColorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argLightColor;
    }

	vector3() {
	    return this.getTypedRuleContext(Vector3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgLightColor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgLightColor(this);
		}
	}


}



class ArgCameraProjectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argCameraProjection;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgCameraProjection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgCameraProjection(this);
		}
	}


}



class ArgCameraIDContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argCameraID;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgCameraID(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgCameraID(this);
		}
	}


}



class ArgCameraFrustumContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argCameraFrustum;
    }

	LPAREN() {
	    return this.getToken(NomParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(NomParser.RPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgCameraFrustum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgCameraFrustum(this);
		}
	}


}



class ArgTransformContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argTransform;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ArgTransformOneContext extends ArgTransformContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(NomParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(NomParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgTransformOne(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgTransformOne(this);
		}
	}


}

NomParser.ArgTransformOneContext = ArgTransformOneContext;

class ArgTransformTwoContext extends ArgTransformContext {

    constructor(parser, ctx) {
        super(parser);
        this.exp1 = null; // ExpressionContext;
        this.exp2 = null; // ExpressionContext;
        this.exp3 = null; // ExpressionContext;
        this.exp4 = null; // ExpressionContext;
        super.copyFrom(ctx);
    }

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NomParser.LPAREN);
	    } else {
	        return this.getToken(NomParser.LPAREN, i);
	    }
	};


	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NomParser.RPAREN);
	    } else {
	        return this.getToken(NomParser.RPAREN, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgTransformTwo(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgTransformTwo(this);
		}
	}


}

NomParser.ArgTransformTwoContext = ArgTransformTwoContext;

class ArgRotateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argRotate;
        this.exp1 = null; // ExpressionContext
        this.exp2 = null; // ExpressionContext
        this.exp3 = null; // ExpressionContext
        this.exp4 = null; // ExpressionContext
    }

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NomParser.LPAREN);
	    } else {
	        return this.getToken(NomParser.LPAREN, i);
	    }
	};


	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(NomParser.RPAREN);
	    } else {
	        return this.getToken(NomParser.RPAREN, i);
	    }
	};


	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgRotate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgRotate(this);
		}
	}


}



class ArgTranslateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argTranslate;
    }

	LPAREN() {
	    return this.getToken(NomParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(NomParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgTranslate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgTranslate(this);
		}
	}


}



class ArgColorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argColor;
    }

	LPAREN() {
	    return this.getToken(NomParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(NomParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgColor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgColor(this);
		}
	}


}



class ArgControlRotateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argControlRotate;
    }

	vector3() {
	    return this.getTypedRuleContext(Vector3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgControlRotate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgControlRotate(this);
		}
	}


}



class ArgControlScaleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argControlScale;
    }

	vector3() {
	    return this.getTypedRuleContext(Vector3Context,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgControlScale(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgControlScale(this);
		}
	}


}



class ArgPointContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argPoint;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgPoint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgPoint(this);
		}
	}


}



class ArgAzimuthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argAzimuth;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgAzimuth(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgAzimuth(this);
		}
	}


}



class ArgTwistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argTwist;
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgTwist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgTwist(this);
		}
	}


}



class ArgReverseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argReverse;
    }


	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgReverse(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgReverse(this);
		}
	}


}



class ArgMintorsionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argMintorsion;
    }


	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgMintorsion(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgMintorsion(this);
		}
	}


}



class ArgFuncContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argFunc;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgFunc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgFunc(this);
		}
	}


}



class ArgFuncXContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argFuncX;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgFuncX(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgFuncX(this);
		}
	}


}



class ArgFuncYContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argFuncY;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgFuncY(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgFuncY(this);
		}
	}


}



class ArgFuncZContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_argFuncZ;
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterArgFuncZ(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitArgFuncZ(this);
		}
	}


}



class CommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_command;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CmdSurfaceContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.name = null; // IdentContext;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	argColor() {
	    return this.getTypedRuleContext(ArgColorContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdSurface(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdSurface(this);
		}
	}


}

NomParser.CmdSurfaceContext = CmdSurfaceContext;

class CmdInstanceContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.name = null; // IdentContext;
        this.entity = null; // IdentContext;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	argSurface = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgSurfaceContext);
	    } else {
	        return this.getTypedRuleContext(ArgSurfaceContext,i);
	    }
	};

	argTransform = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgTransformContext);
	    } else {
	        return this.getTypedRuleContext(ArgTransformContext,i);
	    }
	};

	argHidden = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgHiddenContext);
	    } else {
	        return this.getTypedRuleContext(ArgHiddenContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdInstance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdInstance(this);
		}
	}


}

NomParser.CmdInstanceContext = CmdInstanceContext;

class CmdDeleteContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	deleteFace = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeleteFaceContext);
	    } else {
	        return this.getTypedRuleContext(DeleteFaceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdDelete(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdDelete(this);
		}
	}


}

NomParser.CmdDeleteContext = CmdDeleteContext;

class CmdLightContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.name = null; // IdentContext;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	argLightType() {
	    return this.getTypedRuleContext(ArgLightTypeContext,0);
	};

	argLightColor() {
	    return this.getTypedRuleContext(ArgLightColorContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdLight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdLight(this);
		}
	}


}

NomParser.CmdLightContext = CmdLightContext;

class CmdNamedArgsContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.name = null; // IdentContext;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	argPoint() {
	    return this.getTypedRuleContext(ArgPointContext,0);
	};

	argControlScale() {
	    return this.getTypedRuleContext(ArgControlScaleContext,0);
	};

	argControlRotate() {
	    return this.getTypedRuleContext(ArgControlRotateContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	argCross = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgCrossContext);
	    } else {
	        return this.getTypedRuleContext(ArgCrossContext,i);
	    }
	};

	argReverse = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgReverseContext);
	    } else {
	        return this.getTypedRuleContext(ArgReverseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdNamedArgs(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdNamedArgs(this);
		}
	}


}

NomParser.CmdNamedArgsContext = CmdNamedArgsContext;

class CmdCameraContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.name = null; // IdentContext;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	argCameraProjection() {
	    return this.getTypedRuleContext(ArgCameraProjectionContext,0);
	};

	argCameraFrustum() {
	    return this.getTypedRuleContext(ArgCameraFrustumContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	argTranslate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgTranslateContext);
	    } else {
	        return this.getTypedRuleContext(ArgTranslateContext,i);
	    }
	};

	argRotate = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgRotateContext);
	    } else {
	        return this.getTypedRuleContext(ArgRotateContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdCamera(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdCamera(this);
		}
	}


}

NomParser.CmdCameraContext = CmdCameraContext;

class CmdViewportContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.name = null; // IdentContext;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	argCameraID() {
	    return this.getTypedRuleContext(ArgCameraIDContext,0);
	};

	LPAREN() {
	    return this.getToken(NomParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(NomParser.RPAREN, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdViewport(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdViewport(this);
		}
	}


}

NomParser.CmdViewportContext = CmdViewportContext;

class CmdExprListOneContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.name = null; // IdentContext;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(NomParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(NomParser.RPAREN, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdExprListOne(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdExprListOne(this);
		}
	}


}

NomParser.CmdExprListOneContext = CmdExprListOneContext;

class CmdIdListOneContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.name = null; // IdentContext;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	idList() {
	    return this.getTypedRuleContext(IdListContext,0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	argClosed = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgClosedContext);
	    } else {
	        return this.getTypedRuleContext(ArgClosedContext,i);
	    }
	};

	argSurface = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgSurfaceContext);
	    } else {
	        return this.getTypedRuleContext(ArgSurfaceContext,i);
	    }
	};

	argSegs = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgSegsContext);
	    } else {
	        return this.getTypedRuleContext(ArgSegsContext,i);
	    }
	};

	argOrder = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgOrderContext);
	    } else {
	        return this.getTypedRuleContext(ArgOrderContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdIdListOne(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdIdListOne(this);
		}
	}


}

NomParser.CmdIdListOneContext = CmdIdListOneContext;

class CmdSharpContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	idList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdListContext);
	    } else {
	        return this.getTypedRuleContext(IdListContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdSharp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdSharp(this);
		}
	}


}

NomParser.CmdSharpContext = CmdSharpContext;

class CmdGeneralContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.name = null; // IdentContext;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	argFunc() {
	    return this.getTypedRuleContext(ArgFuncContext,0);
	};

	LPAREN() {
	    return this.getToken(NomParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(NomParser.RPAREN, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdGeneral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdGeneral(this);
		}
	}


}

NomParser.CmdGeneralContext = CmdGeneralContext;

class CmdArgSurfaceContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	argSurface() {
	    return this.getTypedRuleContext(ArgSurfaceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdArgSurface(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdArgSurface(this);
		}
	}


}

NomParser.CmdArgSurfaceContext = CmdArgSurfaceContext;

class CmdSweepContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.name = null; // IdentContext;
        this.crossId = null; // IdentContext;
        this.pathId = null; // IdentContext;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	ident = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentContext);
	    } else {
	        return this.getTypedRuleContext(IdentContext,i);
	    }
	};

	argBeginCap = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgBeginCapContext);
	    } else {
	        return this.getTypedRuleContext(ArgBeginCapContext,i);
	    }
	};

	argEndCap = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgEndCapContext);
	    } else {
	        return this.getTypedRuleContext(ArgEndCapContext,i);
	    }
	};

	argReverse = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgReverseContext);
	    } else {
	        return this.getTypedRuleContext(ArgReverseContext,i);
	    }
	};

	argAzimuth = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgAzimuthContext);
	    } else {
	        return this.getTypedRuleContext(ArgAzimuthContext,i);
	    }
	};

	argTwist = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgTwistContext);
	    } else {
	        return this.getTypedRuleContext(ArgTwistContext,i);
	    }
	};

	argMintorsion = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgMintorsionContext);
	    } else {
	        return this.getTypedRuleContext(ArgMintorsionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdSweep(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdSweep(this);
		}
	}


}

NomParser.CmdSweepContext = CmdSweepContext;

class CmdSubdivisionContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.name = null; // IdentContext;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	argSdFlag = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgSdFlagContext);
	    } else {
	        return this.getTypedRuleContext(ArgSdFlagContext,i);
	    }
	};

	argSdLevel = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgSdLevelContext);
	    } else {
	        return this.getTypedRuleContext(ArgSdLevelContext,i);
	    }
	};

	command = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommandContext);
	    } else {
	        return this.getTypedRuleContext(CommandContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdSubdivision(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdSubdivision(this);
		}
	}


}

NomParser.CmdSubdivisionContext = CmdSubdivisionContext;

class CmdBankContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.name = null; // IdentContext;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	set = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SetContext);
	    } else {
	        return this.getTypedRuleContext(SetContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdBank(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdBank(this);
		}
	}


}

NomParser.CmdBankContext = CmdBankContext;

class CmdOffsetContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.name = null; // IdentContext;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	argOffsetFlag = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgOffsetFlagContext);
	    } else {
	        return this.getTypedRuleContext(ArgOffsetFlagContext,i);
	    }
	};

	argHeight = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgHeightContext);
	    } else {
	        return this.getTypedRuleContext(ArgHeightContext,i);
	    }
	};

	argWidth = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgWidthContext);
	    } else {
	        return this.getTypedRuleContext(ArgWidthContext,i);
	    }
	};

	command = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommandContext);
	    } else {
	        return this.getTypedRuleContext(CommandContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdOffset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdOffset(this);
		}
	}


}

NomParser.CmdOffsetContext = CmdOffsetContext;

class CmdGeneralParametricContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.name = null; // IdentContext;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	argFuncX() {
	    return this.getTypedRuleContext(ArgFuncXContext,0);
	};

	argFuncY() {
	    return this.getTypedRuleContext(ArgFuncYContext,0);
	};

	argFuncZ() {
	    return this.getTypedRuleContext(ArgFuncZContext,0);
	};

	LPAREN() {
	    return this.getToken(NomParser.LPAREN, 0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(NomParser.RPAREN, 0);
	};

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdGeneralParametric(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdGeneralParametric(this);
		}
	}


}

NomParser.CmdGeneralParametricContext = CmdGeneralParametricContext;

class CmdSubCmdsContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.name = null; // IdentContext;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	command = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommandContext);
	    } else {
	        return this.getTypedRuleContext(CommandContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdSubCmds(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdSubCmds(this);
		}
	}


}

NomParser.CmdSubCmdsContext = CmdSubCmdsContext;

class CmdIncludeContext extends CommandContext {

    constructor(parser, ctx) {
        super(parser);
        this.open = null; // Token;
        this.name = null; // IdentContext;
        this.end = null; // Token;
        super.copyFrom(ctx);
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterCmdInclude(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitCmdInclude(this);
		}
	}


}

NomParser.CmdIncludeContext = CmdIncludeContext;

class SetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_set;
        this.open = null; // Token
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ExpressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitSet(this);
		}
	}


}



class DeleteFaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = NomParser.RULE_deleteFace;
        this.open = null; // Token
        this.end = null; // Token
    }

	ident() {
	    return this.getTypedRuleContext(IdentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.enterDeleteFace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof NomListener ) {
	        listener.exitDeleteFace(this);
		}
	}


}




NomParser.FileContext = FileContext; 
NomParser.ExpressionContext = ExpressionContext; 
NomParser.AtomContext = AtomContext; 
NomParser.ScientificContext = ScientificContext; 
NomParser.IdentContext = IdentContext; 
NomParser.IdListContext = IdListContext; 
NomParser.Vector3Context = Vector3Context; 
NomParser.ArgClosedContext = ArgClosedContext; 
NomParser.ArgSdFlagContext = ArgSdFlagContext; 
NomParser.ArgSdLevelContext = ArgSdLevelContext; 
NomParser.ArgOffsetFlagContext = ArgOffsetFlagContext; 
NomParser.ArgHeightContext = ArgHeightContext; 
NomParser.ArgWidthContext = ArgWidthContext; 
NomParser.ArgHiddenContext = ArgHiddenContext; 
NomParser.ArgBeginCapContext = ArgBeginCapContext; 
NomParser.ArgEndCapContext = ArgEndCapContext; 
NomParser.ArgSurfaceContext = ArgSurfaceContext; 
NomParser.ArgCrossContext = ArgCrossContext; 
NomParser.ArgSegsContext = ArgSegsContext; 
NomParser.ArgOrderContext = ArgOrderContext; 
NomParser.ArgLightTypeContext = ArgLightTypeContext; 
NomParser.ArgLightColorContext = ArgLightColorContext; 
NomParser.ArgCameraProjectionContext = ArgCameraProjectionContext; 
NomParser.ArgCameraIDContext = ArgCameraIDContext; 
NomParser.ArgCameraFrustumContext = ArgCameraFrustumContext; 
NomParser.ArgTransformContext = ArgTransformContext; 
NomParser.ArgRotateContext = ArgRotateContext; 
NomParser.ArgTranslateContext = ArgTranslateContext; 
NomParser.ArgColorContext = ArgColorContext; 
NomParser.ArgControlRotateContext = ArgControlRotateContext; 
NomParser.ArgControlScaleContext = ArgControlScaleContext; 
NomParser.ArgPointContext = ArgPointContext; 
NomParser.ArgAzimuthContext = ArgAzimuthContext; 
NomParser.ArgTwistContext = ArgTwistContext; 
NomParser.ArgReverseContext = ArgReverseContext; 
NomParser.ArgMintorsionContext = ArgMintorsionContext; 
NomParser.ArgFuncContext = ArgFuncContext; 
NomParser.ArgFuncXContext = ArgFuncXContext; 
NomParser.ArgFuncYContext = ArgFuncYContext; 
NomParser.ArgFuncZContext = ArgFuncZContext; 
NomParser.CommandContext = CommandContext; 
NomParser.SetContext = SetContext; 
NomParser.DeleteFaceContext = DeleteFaceContext; 
